[% setvar section article %]
[% setvar title Perl 5 to Perl 6 %]
[% menu main article 5to6 %]

<h1>[% readvar title %]</h1>

<p>This collection of articles started out as a <a
href="http://perlgeek.de/blog-en/perl-5-to-6/">series of blog
posts</a>, and has been assembled here because it's easier to
read in the chronological order.</p> 

<h2>Table of Contents</h2>
<ul>
    <li><a href="#post_00">Introduction</a></li>
    <li><a href="#post_01">Strings, Arrays, Hashes;</a></li>
    <li><a href="#post_02">Types</a></li>
    <li><a href="#post_03">Basic Control Structures</a></li>
    <li><a href="#post_04">Subroutines and Signatures</a></li>
    <li><a href="#post_05">Objects and Classes</a></li>
    <li><a href="#post_06">Contexts</a></li>
    <li><a href="#post_07">Regexes (also called &quot;rules&quot;)</a></li>
    <li><a href="#post_08">Junctions</a></li>
    <li><a href="#post_09">Comparing and Matching</a></li>
    <li><a href="#post_10">Containers and Values</a></li>
    <li><a href="#post_11">Changes to Perl 5 Operators</a></li>
    <li><a href="#post_12">Laziness</a></li>
    <li><a href="#post_13">Custom Operators</a></li>
    <li><a href="#post_14">The MAIN sub</a></li>
    <li><a href="#post_15">Twigils</a></li>
    <li><a href="#post_16">Enums</a></li>
    <li><a href="#post_17">Unicode</a></li>
    <li><a href="#post_18">Scoping</a></li>
    <li><a href="#post_19">Regexes strike back</a></li>
    <li><a href="#post_20">A grammar for (pseudo) XML</a></li>
    <li><a href="#post_21">Subset Types</a></li>
    <li><a href="#post_22">The State of the implementations</a></li>
    <li><a href="#post_23">Quoting and Parsing</a></li>
    <li><a href="#post_24">The Reduction Meta Operator</a></li>
    <li><a href="#post_25">The Cross Meta Operator</a></li>
    <li><a href="#post_26">Exceptions and control exceptions</a></li>
    <li><a href="#post_27">Common Perl 6 data processing idioms</a></li>
    <li><a href="#post_28">Currying</a></li>
</ul>

<h2 id="post_00">Introduction</h2>
<p>Sat Sep 20 22:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; - Introduction</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    Learn Perl 6 (if you already know Perl 5)
    Learn to love Perl 6
    Understand why</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl 6 is under-documented. That&#39;s no surprise, because (apart from the specification) writing a compiler for Perl 6 seems to be much more urgent than writing documentation that targets the user.</p>

<p>Unfortunately that means that it&#39;s not easy to learn Perl 6, and that you have to have a profound interest in Perl 6 to actually find the motivation to learn it from the specification, IRC channels or from the test suite.</p>

<p>This project, which I&#39;ll preliminary call &#34;Perl 5 to 6&#34; (for lack of a better name) attempts to fill that gap with a series of short articles.</p>

<p>Each lesson has a rather limited scope, and tries to explain the two or three most important points with very short examples. It also tries to explain why things changed from Perl 5 to 6, and why this is important. I also hope that the knowledge you gain from reading these lessons is enough to basically understand the Synopses, which are the canonical source of all Perl 6 wisdom.</p>

<p>To keep the reading easy, each lesson should not exceed 200 lines or 1000 words (but it&#39;s a soft limit).</p>

<p>Perhaps the lessons are too short to learn a programming language from them, but I hope that they draw an outline of the language design, which allows you to see its beauty without having to learn the language.</p>

<h3><a class='u'
name="IT&#39;S_NOT"
>IT&#39;S NOT</a></h3>

<p>This is not a guide for converting Perl 5 to Perl 6 programs. It is also not a comprehensive list of differences.</p>

<p>It is also not oriented on the current state of the implementations, but on the ideal language as specified.</p>

<h3><a class='u'
name="ROADMAP"
>ROADMAP</a></h3>

<p>Already written or in preparation:</p>

<pre>    00 Intro
    01 Strings, Arrays, Hashes
    02 Types
    03 Control structures
    04 Subs and Signatures
    05 Objects and Classes
    06 Contexts
    07 Rules
    08 Junctions
    09 Comparisons and Smartmatching
    10 Containers and Binding
    11 Basic Operators
    12 Laziness (-)
    13 Custom Operators (-)
    14 the MAIN sub
    15 Twigils
    16 Enums
    17 Unicode (-)
    18 Scoping
    19 More Regexes
    20 A Grammar for XML
    21 Subset types
    22 State of the Implementations
    23 Quoting and Parsing (-)
    24 Recude meta operator
    25 Cross meta operator
    26 Exceptions and control exceptions</pre>

<p>(Things that are not or mostly not implemented in Rakudo are marked with <code>(-)</code>)</p>

<p>Things that I want to write about, but which I don&#39;t know well enough yet:</p>

<pre>    Macros
    Meta Object Programming
    Concurrency
    IO</pre>

<p>Things that I want to mention somewhere, but don&#39;t know where</p>

<pre>    .perl method</pre>

<p>I&#39;ll also update these lessons from time to time make sure they are not too outdated.</p>

<h3><a class='u'
name="AUTHOR"
>AUTHOR</a></h3>

<p>Moritz Lenz, <a href="http://perlgeek.de/" class="podlinkurl"
>http://perlgeek.de/</a>, <code>moritz@faui2k3.org</code></p>

<h3><a class='u'
name="LINKS"
>LINKS</a></h3>

<p>Other documentation efforts can be found on <a href="http://perl6.org/documentation/" class="podlinkurl"
>http://perl6.org/documentation/</a>.</p>


<h2 id="post_01">Strings, Arrays, Hashes;</h2>
<p>Sat Sep 20 22:20:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 01 - Strings,
Arrays,
Hashes;</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    my $five = 5;
    print &#34;an interpolating string, just like in perl $five\n&#34;;
    say &#39;say() adds a newline to the output, just like in perl 5.10&#39;;

    my @array = 1, 2, 3, &#39;foo&#39;;
    my $sum = @array[0] + @array[1];
    if $sum &#62; @array[2] {
        say &#34;not executed&#34;;
    }
    my $number_of_elems = @array.elems;     # or +@array
    my $last_item = @array[*-1];

    my %hash = foo =&#62; 1, bar =&#62; 2, baz =&#62; 3;
    say %hash{&#39;bar&#39;};                       # 2
    say %hash&#60;bar&#62;;                         # same with auto-quoting
    # this is an error: %hash{bar}
    # (it tries to call the subroutine bar(), which is not declared</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl 6 is just like Perl 5 - only better. Statements are terminated by semicolons. After the last statement in a block and after a closing curly brace at the end of a line the semicolon is optional.</p>

<p>Variables still begin with a sigil (like <code>$</code>, <code>@</code>, <code>%</code>), and many Perl 5 builtins are still mostly unchanged in Perl 6.</p>

<h4><a class='u'
name="Strings"
>Strings</a></h4>

<p>Strings are surrounded by double quotes (in which case they are interpolating), or with single quotes. Backslash escapes work just like in Perl 5.</p>

<p>However the interpolation rules have changed a bit. The following things interpolate</p>

<pre>    my $scalar = 6;
    my @array = 1, 2, 3;
    say &#34;Perl $scalar&#34;;         # &#39;Perl 6&#39;
    say &#34;An @array[]&#34;;          # &#39;An 1 2 3&#39;, a so-called &#34;Zen slice&#34;
    say &#34;@array[1]&#34;;            # &#39;2&#39;
    say &#34;Code: { $scalar * 2 }&#34; # &#39;Code: 12&#39;</pre>

<p>Arrays and hashes only interpolate if followed by an index (or a method call that ends in parenthesis, like <code>&#34;some $obj.method()&#34;</code>), empty indexes interpolate the whole data structure.</p>

<p>A block in curly braces is executed as code, and the result is interpolated.</p>

<h4><a class='u'
name="Arrays"
>Arrays</a></h4>

<p>Arrays variables still begin with the <code>@</code> sigil. And they always do, even when accessing stored items, ie. when an index is present.</p>

<pre>    my @a = 5, 1, 2;            # no parens needed anymore
    say @a[0];                  # yes, it starts with @
    say @a[0, 2];               # slices also work</pre>

<p>Lists are constructed with the Comma operator. <code>1,</code> is a list, <code>(1)</code> isn&#39;t.</p>

<p>Since everything is an object, you can call methods on arrays:</p>

<pre>    my @b = @a.sort;
    @b.elems;                   # number of items
    if @b &#62; 2 { say &#34;yes&#34; }     # still works
    @b.end;                     # number of last index. Replaces $#array
    my @c = @b.map({$_ * 2 });  # map is also a method, yes</pre>

<p>There is a short form for the old <code>qw/../</code> quoting construct:</p>

<pre>    my @methods = &#60;shift unshift push pop end delete sort map&#62;;</pre>

<h4><a class='u'
name="Hashes"
>Hashes</a></h4>

<p>While Perl 5 hashes are even sized lists when viewed in list context, Perl 6 hashes are lists of pairs in that context. Pairs are also used for other things, like named arguments for subroutines, but more on that later.</p>

<p>Just like with arrays the sigil stays invariant when you index it. And hashes also have methods that you can call on them.</p>

<pre>    my %drinks =
        France  =&#62; &#39;Wine&#39;,
        Bavaria =&#62; &#39;Beer&#39;,
        USA     =&#62; &#39;Coke&#39;;

    say &#34;The people in France love &#34;,  %drinks{&#39;France&#39;};
    my @countries = %drinks.keys.sort;</pre>

<p>Note that when you access hash elements with <code>%hash{...}</code>, the key is not automatically quoted like in Perl 5. So <code>%hash{foo}</code> doesn&#39;t access index <code>&#34;foo&#34;</code>, but calls the function <code>foo()</code>. The auto quoting isn&#39;t gone, it just has a different syntax:</p>

<pre>    say %drinks&#60;Bavaria&#62;;</pre>

<h4><a class='u'
name="Final_Notes"
>Final Notes</a></h4>

<p>Most builtin methods exist both as a method and as a sub. So you can write both <code>sort @array</code> and <code>@array.sort</code>.</p>

<p>Finally you should know that both <code>[..]</code> and <code>{...}</code> (occurring directly after a term) are just method calls with a special syntax, not something tied to arrays and hashes. That means that they are also not tied to a particular sigil.</p>

<pre>    my $a = [1, 2, 3];
    say $a[2];          # 3</pre>

<p>This implies that you don&#39;t need special dereferencing syntax, and that you can create objects that can act as arrays, hashes and subs at the same time.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S02.html" class="podlinkurl"
>http://perlcabal.org/syn/S02.html</a>, <a href="http://perlcabal.org/syn/S29.html" class="podlinkurl"
>http://perlcabal.org/syn/S29.html</a></p>


<h2 id="post_02">Types</h2>
<p>Sat Sep 20 22:40:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 02 - Types</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    my Int $x = 3;
    $x = &#34;foo&#34;;         # error
    say $x.WHAT;        # &#39;Int()&#39;
 
    # check for a type:
    if $x ~~ Int {
        say &#39;$x contains an Int&#39;
    }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl 6 has types. Everything is an object in some way, and has a type. Variables can have type constraints, but they don&#39;t need to have one.</p>

<p>There are some basic types that you should know about:</p>

<pre>    &#39;a string&#39;      # Str
    2               # Int
    3.14            # Rat (rational number)
    (1, 2, 3)       # Seq</pre>

<p>All &#34;normal&#34; built-in types begin with an upper case letter. All &#34;normal&#34; types inherit from <code>Any</code>, and absolutely everything inherits from <code>Mu</code>.</p>

<p>You can restrict the type of values that a variable can hold by adding the type name to the declaration.</p>

<pre>    my Numeric $x = 3.4;
    my Int @a = 1, 2, 3;</pre>

<p>It is an error to try to put a value into a variable that is of a &#34;wrong&#34; type (ie neither the specified type nor a subtype).</p>

<p>A type declaration on an Array applies to its contents, so <code>my Str @s</code> is an array that can only contain strings.</p>

<p>Some types stand for a whole family of more specific types, for example integers (type <code>Int</code>), rationals (type <code>Rat</code>) and floating-point numbers (type <code>Num</code>) conform to the <code>Numeric</code> type.</p>

<h4><a class='u'
name="Introspection"
>Introspection</a></h4>

<p>You can learn about the direct type of a thing by calling its <code>.WHAT</code> method.</p>

<pre>    say &#34;foo&#34;.WHAT;     # Str()</pre>

<p>However if you want to check if something is of a specific type, there is a different way, which also takes inheritance into account and is therefore recommended:</p>

<pre>    if $x ~~ Int {
        say &#39;Variable $x contains an integer&#39;;
    }</pre>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>The type system isn&#39;t very easy to grok in all its details, but there are good reasons why we need types:</p>

<dl>
<dt><a name="Programming_safety"
>Programming safety</a></dt>

<dd>
<p>If you declare something to be of a particular type, you can be sure that you can perform certain operations on it. No need to check.</p>

<dt><a name="Optimizability"
>Optimizability</a></dt>

<dd>
<p>When you have type informations at compile time, you can perform certain optimizations. Perl 6 doesn&#39;t have to be slower than C, in principle.</p>

<dt><a name="Extensibility"
>Extensibility</a></dt>

<dd>
<p>With type informations and multiple dispatch you can easily refine operators for particular types.</p>
</dd>
</dl>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S02.html#Built-In_Data_Types" class="podlinkurl"
>http://perlcabal.org/syn/S02.html#Built-In_Data_Types</a>,</p>


<h2 id="post_03">Basic Control Structures</h2>
<p>Sat Sep 20 23:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 03 - Basic Control Structures</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    if $percent &#62; 100  {
        say &#34;weird mathematics&#34;;
    }
    for 1..3 {
        # using $_ as loop variable
        say 2 * $_;
    }
    for 1..3 -&#62; $x {
        # with explicit loop variable
        say 2 * $x;
    }

    while $stuff.is_wrong {
        $stuff.try_to_make_right;
    }

    die &#34;Access denied&#34; unless $password eq &#34;Secret&#34;;</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Most Perl 5 control structures are quite similar in Perl 6. The biggest visual difference is that you don&#39;t need a pair of parenthesis after <code>if</code>, <code>while</code>, <code>for</code> etc.</p>

<p>In fact you are discouraged from using parenthesis around conditions. The reason is that any identifier followed immediately (ie. without whitespace) by an opening parenthesis is parsed as a subroutine call, so <code>if($x &#60; 3)</code> tries to call a function named <code>if</code>. While a space after the <code>if</code> fixes that, it is safer to just omit the parens.</p>

<h4><a class='u'
name="Branches"
>Branches</a></h4>

<p><code>if</code> is mostly unchanged, you can still add <code>elsif</code> and <code>else</code> branches. <code>unless</code> is still there, but no <code>else</code> branch is allowed after <code>unless</code>.</p>

<pre>    my $sheep = 42;
    if $sheep == 0 {
        say &#34;How boring&#34;;
    } elsif $sheep == 1 {
        say &#34;One lonely sheep&#34;;
    } else {
        say &#34;A herd, how lovely!&#34;;
    }</pre>

<p>You can also use <code>if</code> and <code>unless</code> as a statement modifier, i.e. after a statement:</p>

<pre>    say &#34;you won&#34; if $answer == 42;</pre>

<h4><a class='u'
name="Loops"
>Loops</a></h4>

<p>You can manipulate loops with <code>next</code> and <code>last</code> just like in Perl 5.</p>

<p>The <code>for</code>-Loop is now only used to iterate over lists. By default the topic variable <code>$_</code> is used, unless an explicit loop variable is given.</p>

<pre>    for 1..10 -&#62; $x {
        say $x;
    }</pre>

<p>The <code>-&#62; $x { ... }</code> thing is called a &#34;pointy block&#34; and is something like an anonymous sub, or a lambda in lisp.</p>

<p>You can also use more than one loop variable:</p>

<pre>    for 0..5 -&#62; $even, $odd {
        say &#34;Even: $even \t Odd: $odd&#34;;
    }</pre>

<p>This is also a good way to iterate over hashes:</p>

<pre>    my %h = a =&#62; 1, b =&#62; 2, c =&#62; 3;
    for %h.kv -&#62; $key, $value {
        say &#34;$key: $value&#34;;
    }</pre>

<p>The C-style for-loop is now called <code>loop</code> (and the only looping construct that requires parentheses):</p>

<pre>    loop (my $x = 2; $x &#60; 100; $x = $x**2) {
        say $x;
    }</pre>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S04.html#Conditional_statements" class="podlinkurl"
>http://perlcabal.org/syn/S04.html#Conditional_statements</a></p>


<h2 id="post_04">Subroutines and Signatures</h2>
<p>Sat Sep 20 23:20:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 04 - Subroutines and Signatures</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    # sub without a signature - perl 5 like
    sub print_arguments {
        say &#34;Arguments:&#34;;
        for @_ {
            say &#34;\t$_&#34;;
        }
    }

    # Signature with fixed arity and type:
    sub distance(Int $x1, Int $y1, Int $x2, Int $y2) {
        return sqrt ($x2-$x1)**2 + ($y2-$y1)**2;
    }
    say distance(3, 5, 0, 1); 

    # Default arguments
    sub logarithm($num, $base = 2.7183) {
        return log($num) / log($base)
    }
    say logarithm(4);       # uses default second argument
    say logarithm(4, 2);    # explicit second argument

    # named arguments

    sub doit(:$when, :$what) {
        say &#34;doing $what at $when&#34;;
    }
    doit(what =&#62; &#39;stuff&#39;, when =&#62; &#39;once&#39;);  # &#39;doing stuff at once&#39;
    doit(:when&#60;noon&#62;, :what(&#39;more stuff&#39;)); # &#39;doing more stuff at noon&#39;
    # illegal: doit(&#34;stuff&#34;, &#34;now&#34;)</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Subroutines are declared with the <code>sub</code> keyword, and can have a list of formal parameters, just like in C, Java and most other languages. Optionally these parameters can have type constraints.</p>

<p>Parameters are read-only by default. That can be changed with so-called &#34;traits&#34;:</p>

<pre>    sub try-to-reset($bar) {
        $bar = 2;       # forbidden
    }

    my $x = 2;
    sub reset($bar is rw) {
        $bar = 0;         # allowed
    }
    reset($x); say $x;    # 0

    sub quox($bar is copy){
        $bar = 3;
    }
    quox($x); say $x    # still 0</pre>

<p>Parameters can be made optional by adding a question mark <code>?</code> after them, or by supplying a default value.</p>

<pre>    sub foo($x, $y?) {
        if $y.defined {
            say &#34;Second parameter was supplied and defined&#34;;
        }
    }

    sub bar($x, $y = 2 * $x) { 
        ...
    }</pre>

<h4><a class='u'
name="Named_Parameters"
>Named Parameters</a></h4>

<p>When you invoke a subroutine like this: <code>my_sub($first, $second)</code> the <code>$first</code> argument is bound to the first formal parameter, the <code>$second</code> argument to the second parameter etc., which is why they are called &#34;positional&#34;.</p>

<p>Sometimes it&#39;s easier to remember names than numbers, which is why Perl 6 also has named parameters:</p>

<pre>    my $r = Rectangle.new( 
            x       =&#62; 100, 
            y       =&#62; 200, 
            height =&#62; 23,
            width  =&#62; 42,
            color  =&#62; &#39;black&#39;
    );</pre>

<p>When you see something like this, you immediately know what the specific arguments mean.</p>

<p>To define a named parameter, you simply put a colon <code>:</code> before the parameter in the signature list:</p>

<pre>    sub area(:$width, :$height) {
        return $width * $height;
    }
    area(width =&#62; 2,  height =&#62; 3);
    area(height =&#62; 3, width =&#62; 2 ); # the same
    area(:height(3), :width(2));    # the same</pre>

<p>The last example uses the so-called <i>colon pair syntax</i>. Leaving off the name results in the value being <code>True</code>, and negating it results in the value being <code>False</code>:</p>

<pre>    :draw-perimeter                 # same as &#34;draw-perimeter =&#62; True&#34;
    :!transparent                   # same as &#34;transparent =&#62; False&#34;</pre>

<p>In the declaration of named parameters, the variable name is also used as the name of the parameter. You can use a different name, though:</p>

<pre>    sub area(:width($w), :height($h)){
        return $w * $h;
    }
    area(width =&#62; 2,  height =&#62; 3);</pre>

<h4><a class='u'
name="Slurpy_Parameters"
>Slurpy Parameters</a></h4>

<p>Just because you give your sub a signature doesn&#39;t mean you have to know the number of arguments in advance. You can define so-called <i>slurpy</i> parameters (after all the regular ones) which use up any remaining arguments:</p>

<pre>    sub tail ($first, *@rest){
        say &#34;First: $first&#34;;
        say &#34;Rest: @rest[]&#34;;
    }
    tail(1, 2, 3, 4);           # &#34;First: 1\nRest: 2 3 4\n&#34;</pre>

<p>Named slurpy parameters are declared by using an asterisk in front of a hash parameter:</p>

<pre>    sub order-meal($name, *%extras) {
        say &#34;I&#39;d like some $name, but with a few modifications:&#34;;
        say %extras.keys.join(&#39;, &#39;);
    }

    order-meal(&#39;beef steak&#39;, :vegetarian, :well-done);</pre>

<h4><a class='u'
name="Interpolation"
>Interpolation</a></h4>

<p>By default arrays aren&#39;t interpolated in argument lists, so unlike in Perl 5 you can write something like this:</p>

<pre>    sub a($scalar1, @list, $scalar2) {
        say $scalar2;
    }

    my @list = &#34;foo&#34;, &#34;bar&#34;;
    a(1, @list, 2);                  # 2</pre>

<p>That also means that by default you can&#39;t use a list as an argument list:</p>

<pre>    my @indexes = 1, 4;
    say &#34;abc&#34;.substr(@indexes)       # doesn&#39;t do what you want</pre>

<p>(What actually happens is that the first argument is supposed to be an <code>Int</code>, and is coerced to an Int. Which is the same as if you had written <code>&#34;abc.&#34;substr(@indexes.end)</code> in the first place).</p>

<p>You can achieve the desired behavior with a prefix <code>|</code></p>

<pre>    say &#34;abcdefgh&#34;.substr(|@indexes) # bcde, same as &#34;abcdefgh&#34;.substr(1, 4)</pre>

<h4><a class='u'
name="Multi_Subs"
>Multi Subs</a></h4>

<p>You can actually define multiple subs with the same name but with different parameter lists:</p>

<pre>    multi sub my_substr($str) { ... }                          # 1
    multi sub my_substr($str, $start) { ... }                  # 2
    multi sub my_substr($str, $start, $end) { ... }            # 3
    multi sub my_substr($str, $start, $end, $subst) { ... }    # 4</pre>

<p>Now whenever you call such a sub, the one with the matching parameter list will be chosen.</p>

<p>The multis don&#39;t have to differ in the arity (ie number of arguments), they can also differ in the type of the parameters:</p>

<pre>    multi sub frob(Str $s) { say &#34;Frobbing String $s&#34;  }
    multi sub frob(Int $i) { say &#34;Frobbing Integer $i&#34; }

    frob(&#34;x&#34;)       # Frobbing String x
    frob(2)         # Frobbing Integer 2</pre>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Nobody will doubt the usefulness of explicit sub signatures: less typing, less duplicate argument checks, and more self-documenting code. The value of named parameters has also been discussed already.</p>

<p>It also allows useful introspection. For example when you pass a block or a subroutine to <code>Array.sort</code>, and that piece of code expects exactly one argument, a Schwartzian Transform (see <a href="http://en.wikipedia.org/wiki/Schwartzian_transform" class="podlinkurl"
>http://en.wikipedia.org/wiki/Schwartzian_transform</a>) is automatically done for you - such a functionality would be impossible in Perl 5, because the lack of explicit signatures means that <code>sort</code> can never find out how many arguments the code block expects.</p>

<p>Multi subs are very useful because they allow builtins to be overridden for new types. Let&#39;s assume you want a version of Perl 6 which is localized to handle Turkish strings correctly, which have unusual rules for case conversions.</p>

<p>Instead of modifying the language, you can just introduce a new type <code>TurkishStr</code>, and add multi subs for the builtin functions:</p>

<pre>    multi uc(TurkishStr $s) { ... }</pre>

<p>Now all you have to do is to take care that your strings have the type that corresponds to their language, and then you can use <code>uc</code> just like the normal builtin function.</p>

<p>Since operators are also subs, these refinements work for operators too.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S06.html" class="podlinkurl"
>http://perlcabal.org/syn/S06.html</a></p>


<h2 id="post_05">Objects and Classes</h2>
<p>Tue Sep 23 22:20:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 05 - Objects and Classes</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    class Shape {
        method area { ... }    # literal &#39;...&#39;
        has $.colour is rw;
    }

    class Rectangle is Shape {
        has $.width;
        has $.height;

        method area {
            $!width * $!height;
        }
    }

    my $x = Rectangle.new(
            width   =&#62; 30.0,
            height  =&#62; 20.0,
            colour  =&#62; &#39;black&#39;,
        );
    say $x.area;                # 600
    say $x.colour;              # black
    $x.colour = &#39;blue&#39;;</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl 6 has an object model that is much more fleshed out than the Perl 5 one. It has keywords for creating classes, roles, attributes and methods, and has encapsulated private attributes and methods. In fact it&#39;s much closer to the <code>Moose</code> Perl 5 module (which was inspired by the Perl 6 object system).</p>

<p>There are two ways to declare classes</p>

<pre>    class ClassName;
    # class definition goes here</pre>

<p>The first one begins with <code>class ClassName;</code> and stretches to the end of the file. In the second one the class name is followed by a block, and all that is inside the block is considered to be the class definition.</p>

<pre>    class YourClass {
        # class definition goes here
    }
    # more classes or other code here</pre>

<h4><a class='u'
name="Methods"
>Methods</a></h4>

<p>Methods are declared with the <code>method</code> keyword. Inside the method you can use the term <code>self</code> to refer to the object on which the method is called (the <i>invocant</i>).</p>

<p>You can also give the invocant a different name by adding a first parameter to the signature list and append a colon <code>:</code> to it.</p>

<p>Public methods can be called with the syntax <code>$object.method</code> if it takes no arguments, and <code>$object.method(@args)</code> or <code>$object.method: @args</code> if it takes arguments.</p>

<pre>    class SomeClass {
        # these two methods do nothing but return the invocant
        method foo {
            return self;
        }
        method bar(SomeClass $s: ) {
            return $s;
        }
    }
    my SomeClass $x .= new;
    $x.foo.bar                      # same as $x</pre>

<p>(The <code>my SomeClass $x .= new</code> is actually a shorthand for <code>my SomeClass $x = SomeClass.new</code>. It works because the type declaration fills the variable with a &#34;typo object&#34; of <code>SomeClass</code>, which is an object representing the class.)</p>

<p>Methods can also take additional arguments just like subs.</p>

<p>Private methods can be declared with <code>method !methodname</code>, and called with <code>self!method_name</code>.</p>

<pre>    class Foo {
        method !private($frob) {
            return &#34;Frobbed $frob&#34;;
        }

        method public {
            say self!private(&#34;foo&#34;);
        }
    }</pre>

<p>Private methods can&#39;t be called from outside the class.</p>

<h4><a class='u'
name="Attributes"
>Attributes</a></h4>

<p>Attributes are declared with the <code>has</code> keyword, and have a &#34;twigil&#34;, that is a special character after the sigil. For private attributes that&#39;s a bang <code>!</code>, for public attributes it&#39;s the dot <code>.</code>. Public attributes are just private attributes with a public accessor. So if you want to modify the attribute, you need to use the <code>!</code> sigil to access the actual attribute, and not the accessor (unless the accessor is marked <code>is rw</code>).</p>

<pre>    class SomeClass {
        has $!a;
        has $.b;
        has $.c is rw;

        method set_stuff {
            $!a = 1;    # ok, writing to attribute from within the clas
            $!b = 2;    # same
            $.b = 3;    # ERROR, can&#39;t write to ro-accessor
        }

        method do_stuff {
            # you can use the private name instead of the public one
            # $!b and $.b are really the same thing
            return $!a + $!b + $!c;
        }
    }
    my $x = SomeClass.new;
    say $x.a;       # ERROR!
    say $x.b;       # ok
    $x.b = 2;       # ERROR!
    $x.c = 3;       # ok</pre>

<h4><a class='u'
name="Inheritance"
>Inheritance</a></h4>

<p>Inheritance is done through an <code>is</code> trait.</p>

<pre>    class Foo is Bar { 
        # class Foo inherits from class Bar
        ...
    }</pre>

<p>All the usual inheritance rules apply - methods are first looked up on the direct type, and if that fails, on the parent class (recursively). Likewise the type of a child class is conforming to that of a parent class:</p>

<pre>        class Bar { }
        class Foo is Bar { }
        my Bar $x = Foo.new();   # ok, since Foo ~~ Bar</pre>

<p>In this example the type of <code>$x</code> is <code>Bar</code>, and it is allowed to assign an object of type <code>Foo</code> to it, because &#34;every <code>Foo</code> is a <code>Bar</code>&#34;.</p>

<p>Classes can inherit from multiple other classes:</p>

<pre>    class ArrayHash is Hash is Array { 
        ...
    }</pre>

<p>Though multiple inheritance also comes with multiple problems, and people usually advise against it. Roles are often a safer choice.</p>

<h4><a class='u'
name="Roles_and_Composition"
>Roles and Composition</a></h4>

<p>In general the world isn&#39;t hierarchical, and thus sometimes it&#39;s hard to press everything into an inheritance hierarchy. Which is one of the reasons why Perl 6 has Roles. Roles are quite similar to classes, except you can&#39;t create objects directly from them, and that composition of multiple roles with the same method names generate conflicts, instead of silently resolving to one of them, like multiple inheritance does.</p>

<p>While classes are intended primarily for type conformance, roles are the primary means for code reuse in Perl 6.</p>

<pre>    role Paintable {
        has $.colour is rw;
        method paint { ... }
    }
    class Shape {
        method area { ... }
    }

    class Rectangle is Shape does Paintable {
        has $.width;
        has $.height;
        method area {
            $!width * $!height;
        }
        method paint() {
            for 1..$.height {
                say &#39;x&#39; x $.width;
            }
        }
    }

    Rectangle.new(width =&#62; 8, height =&#62; 3).paint;</pre>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S12.html" class="podlinkurl"
>http://perlcabal.org/syn/S12.html</a> <a href="http://perlcabal.org/syn/S14.html" class="podlinkurl"
>http://perlcabal.org/syn/S14.html</a> <a href="http://www.jnthn.net/papers/2009-yapc-eu-roles-slides.pdf" class="podlinkurl"
>http://www.jnthn.net/papers/2009-yapc-eu-roles-slides.pdf</a> <a href="http://en.wikipedia.org/wiki/Perl_6#Roles" class="podlinkurl"
>http://en.wikipedia.org/wiki/Perl_6#Roles</a></p>


<h2 id="post_06">Contexts</h2>
<p>Wed Sep 24 22:20:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 06 - Contexts</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    my @a = &#60;a b c&#62;;
    my $x = @a;
    say $x[2];          # c
    say (~2).WHAT;      # (Str)
    say +@a;            # 3
    if @a &#60; 10 { say &#34;short array&#34;; }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>When you write something like this</p>

<pre>    $x = @a</pre>

<p>in Perl 5, <code>$x</code> contains less information than <code>@a</code> - it contains only the number of items in <code>@a</code>. To preserve all information, you have to explicitly take a reference: <code>$x = \@a</code>.</p>

<p>In Perl 6 it&#39;s the other way round: by default you don&#39;t lose anything, the scalar just stores the array. This was made possible by introducing a generic item context (called <i>scalar</i> in Perl 5) and more specialized numeric, integer and string contexts. Void and List context remain unchanged.</p>

<p>You can force contexts with special syntax.</p>

<pre>    syntax       context

    ~stuff       String
    ?stuff       Bool (logical)
    +stuff       Numeric
    -stuff       Numeric (also negates)
    $( stuff )   Generic item context
    @( stuff )   List context
    %( stuff )   Hash context
     stuff.tree  Tree context</pre>

<h4><a class='u'
name="Tree_Context"
>Tree Context</a></h4>

<p>In the early days of Perl 6, there were lots of builtins of which two versions existed, one that returned a flat list, one that return a list of arrays.</p>

<p>Now this is solved by returning a list of <code>Parcel</code> objects, where the <code>Parcel</code> objects might or might not flatten out depending on the context.</p>

<p>Consider the infix <code>Z</code> (short for <i>zip</i>) operator, which interleaves the elements from two lists:</p>

<pre>    my @a = &#60;a b c&#62; Z &#60;1 2 3&#62;;
    say @a.join;                # a1b2c3</pre>

<p>What happened here is that the right-hand side of the first statement returned <code>(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)</code>, and assignment to an array, which provides list context, flattened out the inner parcels. On the other hand if you write</p>

<pre>    my @t = (&#60;a b c&#62; Z &#60;1 2 3&#62;).tree;</pre>

<p>then <code>@t</code> now contains three elements, each of which are arrays that don&#39;t flatten out.</p>

<pre>    for @t -&#62; @inner {
        say &#34;first: @inner[0]  second: @inner[1]&#34;
    }</pre>

<p>Produces the output</p>

<pre>    first: a  second: 1
    first: b  second: 2
    first: c  second: 3</pre>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>More specific contexts are a way to delay design choices. For example it seems premature to decide what a list should return in scalar context - a reference to the list would preserve all information, but isn&#39;t very useful in numeric comparisons. On the other hand a string representation might be most useful for debugging purposes. So every possible choice disappoints somebody.</p>

<p>With more specific context you don&#39;t need to make this choice - it returns some sensible default, and all operators that don&#39;t like this choice can simply evaluate the object a more specific context.</p>

<p>For some things (like the Match object), the different contexts really enhance their usefulness and beauty.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S02.html#Context" class="podlinkurl"
>http://perlcabal.org/syn/S02.html#Context</a> <a href="http://perlgeek.de/blog-en/perl-6/immutable-sigils-and-context.html" class="podlinkurl"
>http://perlgeek.de/blog-en/perl-6/immutable-sigils-and-context.html</a></p>


<h2 id="post_07">Regexes (also called &quot;rules&quot;)</h2>
<p>Thu Sep 25 22:20:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 07 - Regexes (also called &#34;rules&#34;)</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    grammar URL {
        token TOP {
            &#60;schema&#62; &#39;://&#39; 
            [&#60;ip&#62; | &#60;hostname&#62; ]
            [ &#39;:&#39; &#60;port&#62;]?
            &#39;/&#39; &#60;path&#62;?
        }
        token byte {
            (\d**1..3) &#60;?{ $0 &#60; 256 }&#62;
        }
        token ip {
            &#60;byte&#62; [\. &#60;byte&#62; ] ** 3
        }
        token schema {
            \w+
        }
        token hostname {
            (\w+) ( \. \w+ )*
        }
        token port {
            \d+
        }
        token path {
            &#60;[ a..z A..Z 0..9 \-_.!~*&#39;():@&#38;=+$,/ ]&#62;+
        }
    }

    my $match = URL.parse(&#39;http://perl6.org/documentation/&#39;);
    say $match&#60;hostname&#62;;       # perl6.org</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Regexes are one of the areas that has been improved and revamped most in Perl 6. We don&#39;t call them <i>regular expressions</i> anymore because they are even less regular than they are in Perl 5.</p>

<p>There are three large changes and enhancements to the regexes</p>

<dl>
<dt><a name="Syntax_clean_up"
>Syntax clean up</a></dt>

<dd>
<p>Many small changes make rules easier to write. For example the dot <code>.</code> matches any character now, the old semantics (anything but newlines) can be achieved with <code>\N</code>.</p>

<p>Modifiers now go at the start of a regex, and non-capturing groups are <code>[...]</code>, which are a lot easier to read and write than the old <code>(?:...)</code>.</p>

<dt><a name="Nested_captures_and_match_object"
>Nested captures and match object</a></dt>

<dd>
<p>In Perl 5, a regex like this <code>(a(b))(c)</code> would put <code>ab</code> into <code>$1</code>, <code>b</code> into <code>$2</code> and <code>c</code> into <code>$3</code> upon successful match. This has changed. Now <code>$0</code> (enumeration starts at zero) contains <code>ab</code>, and <code>$0[0]</code> or <code>$/[0][0]</code> contains <code>b</code>. <code>$1</code> holds <code>c</code>. So each nesting level of parenthesis is reflected in a new nesting level in the result match object.</p>

<p>All the match variables are aliases into <code>$/</code>, which is the so-called <i>Match object</i>, and it actually contains a full match tree.</p>

<dt><a name="Named_regexes_and_grammars"
>Named regexes and grammars</a></dt>

<dd>
<p>You can declare regexes with names just like you can with subs and methods. You can refer to these inside other rules with <code>&#60;name&#62;</code>. And you can put multiple regexes into grammars, which are just like classes and support inheritance and composition</p>
</dd>
</dl>

<p>These changes make Perl 6 regexes and grammars much easier to write and maintain than Perl 5 regexes.</p>

<p>All of these changes go quite deep, and only the surface can be scratched here.</p>

<h4><a class='u'
name="Syntax_clean_up"
>Syntax clean up</a></h4>

<p>Letter characters (ie underscore, digits and all Unicode letters) match literally, and have a special meaning (they are <i>metasyntactic</i>) when escaped with a backslash. For all other characters it&#39;s the other way round - they are metasyntactic unless escaped.</p>

<pre>    literal         metasyntactic
    a  b  1  2      \a \b \1 \2
    \* \: \. \?     *  :  .  ? </pre>

<p>Not all metasyntactic tokens have a meaning (yet). It is illegal to use those without a defined meaning.</p>

<p>There is another way to escape strings in regexes: with quotes.</p>

<pre>    m/&#39;a literal text: $#@!!&#39;/</pre>

<p>The changed semantics of <code>.</code> has already been mentioned, and also that <code>[...]</code> now construct non-capturing groups. Char classes are <code>&#60;[...]&#62;</code>, and negated char classes <code>&#60;-[...]&#62;</code>. <code>^</code> and <code>$</code> always match begin and end of the string respectively, to match begin and end of lines use <code>^^</code> and <code>$$</code>.</p>

<p>This means that the <code>/s</code> and <code>/m</code> modifiers are gone. Modifiers are now given at the start of a regex, and are given in this notation:</p>

<pre>    if &#34;abc&#34; ~~ m:i/B/ {
        say &#34;Match&#34;;
    }
... which happens to be the same as the I&#60;colon pair&#62; notation that you can
use for passing named arguments to routines.</pre>

<p>Modifiers have a short and a long form. The old <code>/x</code> modifier is now the default, i.e. white spaces are ignored.</p>

<pre>    short   long            meaning
    -------------------------------
    :i      :ignorecase     ignore case (formerly /i)
    :m      :ignoremark     ignore marks (accents, diaeresis etc.)
    :g      :global         match as often as possible (/g)
    :s      :sigspace       Every white space in the regex matches
                            (optional) white space
    :P5     :Perl5          Fall back to Perl 5 compatible regex syntax
    :4x     :x(4)           Match four times (works for other numbers as well)
    :3rd    :nth(3)         Third match
    :ov     :overlap        Like :g, but also consider overlapping matches
    :ex     :exhaustive     Match in all possible ways
            :ratchet        Don&#39;t backtrack</pre>

<p>The <code>:sigspace</code> needs a bit more explanation. It replaces all whitespace in the pattern with <code>&#60;.ws&#62;</code> (that is it calls the rule <code>ws</code> without keeping its result). You can override that rule. By default it matches one or more whitespaces if it&#39;s enclosed in word characters, and zero or more otherwise.</p>

<p>(There are more new modifiers, but probably not as important as the listed ones).</p>

<h4><a class='u'
name="The_Match_Object"
>The Match Object</a></h4>

<p>Every match generates a so-called match object, which is stored in the special variable <code>$/</code>. It is a versatile thing. In boolean context it returns <code>Bool::True</code> if the match succeeded. In string context it returns the matched string, when used as a list it contains the positional captures, and when used as a hash it contains the named captures. The <code>.from</code> and <code>.to</code> methods contain the first and last string positions of the match.</p>

<pre>    if &#39;abcdefg&#39; ~~ m/(.(.)) (e | bla ) $&#60;foo&#62; = (.) / {
        say $/[0][0];           # d
        say $/[0];              # cd
        say $/[1];              # e
        say $/&#60;foo&#62;             # f
    }</pre>

<p><code>$0</code>, <code>$1</code> etc are just aliases for <code>$/[0]</code>, <code>$/[1]</code> etc. Likewise <code>$/&#60;x&#62;</code> and <code>$/{&#39;x&#39;}</code> are aliased to <code>$&#60;x&#62;</code>.</p>

<p>Note that anything you access via <code>$/[...]</code> and <code>$/{...}</code> is a match object (or a list of Match objects) again. This allows you to build real parse trees with rules.</p>

<h4><a class='u'
name="Named_Regexes_and_Grammars"
>Named Regexes and Grammars</a></h4>

<p>Regexes can either be used with the old style <code>m/.../</code>, or be declared like subs and methods.</p>

<pre>    regex a { ... }
    token b { ... }
    rule  c { ... }</pre>

<p>The difference is that <code>token</code> implies the <code>:ratchet</code> modifier (which means no backtracking, like a <code>(?&#62; ... )</code> group around each part of the regex in perl 5), and <code>rule</code> implies both <code>:ratchet</code> and <code>:sigspace</code>.</p>

<p>To call such a rule (we&#39;ll call them all rules, independently with which keyword they were declared) you put the name in angle brackets: <code>&#60;a&#62;</code>. This implicitly anchors the sub rule to its current position in the string, and stores the result in the match object in <code>$/&#60;a&#62;</code>, ie it&#39;s a named capture. You can also call a rule without capturing its result by prefixing its name with a dot: <code>&#60;.a&#62;</code>.</p>

<p>A grammar is a group of rules, just like a class (see the SYNOPSIS for an example). Grammars can inherit, override rules and so on.</p>

<pre>    grammar URL::HTTP is URL {
        token schema { &#39;http&#39; }
    }</pre>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Perl 5 regexes are often rather unreadable, the grammars encourage you to split a large regex into more readable, short fragments. Named captures make the rules more self-documenting, and many things are now much more consistent than they were before.</p>

<p>Finally grammars are so powerful that you can parse about every programming language with them, including Perl 6 itself. That makes the Perl 6 grammar easier to maintain and to change than the Perl 5 one, which is written in C and not changeable at parse time.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S05.html" class="podlinkurl"
>http://perlcabal.org/syn/S05.html</a></p>

<p><a href="http://perlgeek.de/en/article/mutable-grammar-for-perl-6" class="podlinkurl"
>http://perlgeek.de/en/article/mutable-grammar-for-perl-6</a></p>

<p><a href="http://perlgeek.de/en/article/longest-token-matching" class="podlinkurl"
>http://perlgeek.de/en/article/longest-token-matching</a></p>


<h2 id="post_08">Junctions</h2>
<p>Fri Sep 26 22:20:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 07 - Junctions</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    my $x = 4;
    if $x == 3|4 {
        say &#39;$x is either 3 or 4&#39;
    }
    say ((2|3|4)+7).perl        # (9|10|11)</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Junctions are superpositions of unordered values. Operations on junctions are executed for each item of the junction separately (and maybe even in parallel), and the results are assembled in a junction of the same type.</p>

<p>The junction types only differ when evaluated in boolean context. The types are <code>any</code>, <code>all</code>, <code>one</code> and <code>none</code>.</p>

<pre>    Type    Infix operator
    any     |
    one     ^
    all     &#38;</pre>

<p><code>1 | 2 | 3</code> is the same as <code>any(1..3)</code>.</p>

<pre>    my Junction $weekday = any &#60;Monday Tuesday Wednesday 
                                Thursday Friday Saturday Sunday&#62;
    if $day eq $weekday {
        say &#34;See you on $day&#34;;
    }</pre>

<p>In this example the <code>eq</code> operator is called with each pair <code>$day, &#39;Monday&#39;</code>, <code>$day, &#39;Tuesday&#39;</code> etc. and the result is put into an <code>any</code>-junction again. As soon as the result is determined (in this case, as soon as one comparison returns <code>True</code>) it can abort the execution of the other comparisons.</p>

<p>This works not only for operators, but also for routines:</p>

<pre>    if 2 == sqrt(4 | 9 | 16) {
        say &#34;YaY&#34;;
    }</pre>

<p>To make this possible, junctions stand outside the normal type hierarchy (a bit):</p>

<pre>                      Mu
                    /    \
                   /      \
                 Any     Junction
               /  |  \
            All other types</pre>

<p>If you want to write a sub that takes a junction and doesn&#39;t autothread over it, you have to declare the type of the parameter either as <code>Mu</code> or <code>Junction</code></p>

<pre>    sub dump_yaml(Junction $stuff) {
        # we hope that YAML can represent junctions ;-)
        ....
    }</pre>

<p>A word of warning: junctions can behave counter-intuitive sometimes. With non-junction types <code>$a != $b</code> and <code>!($a == $b)</code> always mean the same thing. If one of these variables is a junction, that might be different:</p>

<pre>    my Junction $b = 3 | 2;
    my $a = 2; 
    say &#34;Yes&#34; if   $a != $b ;       # Yes
    say &#34;Yes&#34; if !($a == $b);       # no output</pre>

<p><code>2 != 3</code> is true, thus <code>$a != 2|3</code> is also true. On the other hand the <code>$a == $b</code> comparison returns a single Bool value (<code>True</code>), and the negation of that is <code>False</code>.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Perl aims to be rather close to natural languages, and in natural language you often say things like &#34;if the result is $this or $that&#34; instead of saying &#34;if the result is $this or the result is $that&#34;. Most programming languages only allow (a translation of) the latter, which feels a bit clumsy. With junctions Perl 6 allows the former as well.</p>

<p>It also allows you to write many comparisons very easily that otherwise require loops.</p>

<p>As an example, imagine an array of numbers, and you want to know if all of them are non-negative. In Perl 5 you&#39;d write something like this:</p>

<pre>    # Perl 5 code:
    my @items = get_data();
    my $all_non_neg = 1;
    for (@items){
        if ($_ &#60; 0) {
            $all_non_neg = 0;
            last;
        }
    }
    if ($all_non_neg) { ... }</pre>

<p>Or if you happen to know about <code>List::MoreUtils</code></p>

<pre>    use List::MoreUtils qw(all);
    my @items = get_data;
    if (all { $_ &#62;= 0 } @items) { ...  }</pre>

<p>In Perl 6 that is short and sweet:</p>

<pre>    my @items = get_data();
    if all(@items) &#62;= 0 { ... }</pre>

<h3><a class='u'
name="A_Word_of_Warning"
>A Word of Warning</a></h3>

<p>Many people get all excited about junctions, and try to do too much with them.</p>

<p>Junctions are not sets; if you try to extract items from a junction, you are doing it wrong, and should be using a <code>Set</code> instead.</p>

<p>It is a good idea to use junctions as smart conditions, but trying to build a solver for equations based on the junction autothreading rules is on over-extortion and usually results in frustration.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S03.html#Junctive_operators" class="podlinkurl"
>http://perlcabal.org/syn/S03.html#Junctive_operators</a></p>


<h2 id="post_09">Comparing and Matching</h2>
<p>Sat Sep 27 22:20:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 09 - Comparing and Matching</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    &#34;ab&#34;    eq      &#34;ab&#34;    True
    &#34;1.0&#34;   eq      &#34;1&#34;     False
    &#34;a&#34;     ==      &#34;b&#34;     failure, because &#34;a&#34; isn&#39;t numeric
    &#34;1&#34;     ==      1.0     True
    1       ===     1       True
    [1, 2]  ===     [1, 2]  False
    $x = [1, 2];
    $x      ===     $x      True
    $x      eqv     $x      True
    [1, 2]  eqv     [1, 2]  True
    1.0     eqv     1       False

    &#39;abc&#39;   ~~      m/a/    Match object, True in boolean context
    &#39;abc&#39;   ~~      Str     True
    &#39;abc&#39;   ~~      Int     False
    Str     ~~      Any     True
    Str     ~~      Num     False
    1       ~~      0..4    True
    -3      ~~      0..4    False</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl 6 still has string comparison operators (<code>eq</code>, <code>lt</code>, <code>gt</code>, <code>le</code>, <code>ge</code>, <code>ne</code>; <code>cmp</code> is now called <code>leg</code>) that evaluate their operands in string context. Similarly all the numeric operators from Perl 5 are still there.</p>

<p>Since objects are more than blessed references, a new way for comparing them is needed. <code>===</code> returns only true for identical values. For immutable types like numbers or Strings that is a normal equality tests, for other objects it only returns <code>True</code> if both variables refer to the same object (like comparing memory addresses in C++).</p>

<p><code>eqv</code> tests if two things are equivalent, ie if they are of the same type and have the same value. In the case of containers (like <code>Array</code> or <code>Hash</code>), the contents are compared with <code>eqv</code>. Two identically constructed data structures are equivalent.</p>

<h4><a class='u'
name="Smart_matching"
>Smart matching</a></h4>

<p>Perl 6 has a &#34;compare everything&#34; operator, called &#34;smart match&#34; operator, and spelled <code>~~</code>. It is asymmetrical, and generally the type of the right operand determines the kind of comparison that is made.</p>

<p>For immutable types it is a simple equality comparison. A smart match against a type object checks for type conformance. A smart match against a regex matches the regex. Matching a scalar against a <code>Range</code> object checks if that scalar is included in the range.</p>

<p>There are other, more advanced forms of matching: for example you can check if an argument list (<code>Capture</code>) fits to the parameter list (<code>Signature</code>) of a subroutine, or apply file test operators (like <code>-e</code> in Perl 5).</p>

<p>What you should remember is that any &#34;does $x fit to $y?&#34;-Question will be formulated as a smart match in Perl 6.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S03.html#Smart_matching" class="podlinkurl"
>http://perlcabal.org/syn/S03.html#Smart_matching</a></p>


<h2 id="post_10">Containers and Values</h2>
<p>Wed Oct 15 22:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 10 - Containers and Values</p>

<h3><a class='u'
name="Synopsis"
>Synopsis</a></h3>

<pre>    my ($x, $y);
    $x := $y;
    $y = 4;
    say $x;             # 4
    if $x =:= $y {
        say &#39;$x and $y are different names for the same thing&#39;
    }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl 6 distinguishes between containers, and values that can be stored in containers.</p>

<p>A normal scalar variable is a container, and can have some properties like type constraints, access constraints (for example it can be read only), and finally it can be aliased to other containers.</p>

<p>Putting a value into a container is called <i>assignment</i>, and aliasing two containers is called <code>binding</code>.</p>

<pre>    my @a = 1, 2, 3;
    my Int $x = 4;
    @a[0] := $x;     # now @a[0] and $x are the same variable
    @a[0] = &#39;Foo&#39;;   # Error &#39;Type check failed&#39;</pre>

<p>Types like <code>Int</code> and <code>Str</code> are immutable, ie the objects of these types can&#39;t be changed; but you can still change the variables (the containers, that is) which hold these values:</p>

<pre>    my $a = 1;
    $a = 2;     # no surprise here</pre>

<p>Binding can also be done at compile time with the <code>::=</code> operator.</p>

<p>You can check if two things are bound together the <code>=:=</code> comparison operator.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Exporting and importing subs, types and variables is done via aliasing. Instead of some hard-to-grasp typeglob aliasing magic, Perl 6 offers a simple operator.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S03.html#Item_assignment_precedence" class="podlinkurl"
>http://perlcabal.org/syn/S03.html#Item_assignment_precedence</a></p>


<h2 id="post_11">Changes to Perl 5 Operators</h2>
<p>Thu Oct 16 22:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 11 - Changes to Perl 5 Operators</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    # bitwise operators
    5   +| 3;       # 7
    5   +^ 3;       # 6
    5   +&#38; 3;       # 1
    &#34;b&#34; ~| &#34;d&#34;;     # &#39;f&#39;
 
    # string concatenation
    &#39;a&#39; ~ &#39;b&#39;;      # &#39;ab&#39;

    # file tests
    if &#39;/etc/passwd&#39;.path ~~ :e { say &#34;exists&#34; }

    # repetition
    &#39;a&#39; x 3;        # &#39;aaa&#39;
    &#39;a&#39; xx 3;       # &#39;a&#39;, &#39;a&#39;, &#39;a&#39;

    # ternary, conditional op
    my ($a, $b) = 2, 2;
    say $a == $b ?? 2 * $a !! $b - $a;

    # chained comparisons
    my $angle = 1.41;
    if 0 &#60;= $angle &#60; 2 * pi { ... }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>All the numeric operators (<code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>, <code>**</code>, <code>%</code>) remain unchanged.</p>

<p>Since <code>|</code>, <code>^</code> and <code>&#38;</code> now construct junctions, the bitwise operators have a changed syntax. They now contain a context prefix, so for example <code>+|</code> is bit wise OR with numeric context, and <code>~^</code> is one&#39;s complement on a string. Bit shift operators changed in the same way.</p>

<p>String concatenation is now <code>~</code>, the dot <code>.</code> is used for method calls.</p>

<p>File tests are now formulated in <code>Pair</code> notation, Perl 5 <code>-e</code> is now <code>:e</code>. If something other than <code>$_</code> should be used as the file name, it can be supplied via <code>$filename.path ~~ :e</code>.</p>

<p>The repetition operator <code>x</code> is now split into two operators: <code>x</code> replicates strings, <code>xx</code> lists.</p>

<p>The ternary operator, formerly <code>$condition ? $true : $false</code>, is now spelled <code>$condition ?? $true !! $false</code>.</p>

<p>Comparison operators can now be chained, so you can write <code>$a &#60; $b &#60; $c</code> and it does what you mean.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Many changes to the operators aim at a better Huffman coding, ie give often used things short names (like <code>.</code> for method calls) and seldom used operators a longer name (like <code>~&#38;</code> for string bit-wise AND).</p>

<p>The chaining comparison operators are another step towards making the language more natural, and allowing things that are commonly used in mathematical notation.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S03.html#Changes_to_Perl_5_operators" class="podlinkurl"
>http://perlcabal.org/syn/S03.html#Changes_to_Perl_5_operators</a></p>


<h2 id="post_12">Laziness</h2>
<p>Fri Oct 17 22:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 12 - Laziness</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    my @integers = 0..*;
    for @integers -&#62; $i {
        say $i;
        last if $i % 17 == 0;
    }

    my @even := map { 2 * $_ }, 0..*;
    my @stuff := gather {
        for 0 .. Inf {
            take 2 ** $_;
        }
    }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl programmers tend to be lazy. And so are their lists.</p>

<p>In this case <i>lazy</i> means, that the evaluation is delayed as much as possible. When you write something like <code>@a := map BLOCK, @b</code>, the block isn&#39;t executed at all. Only when you start to access items from <code>@a</code> the <code>map</code> actually executes the block and fills <code>@a</code> as much as needed.</p>

<p>Note the use of binding instead of assignment: Assigning to an array might force eager evaluation (unless the compiler knows the list is going to be infinite; the exact details of figuring this out are still subject to change), binding never does.</p>

<p>Laziness allows you to deal with infinite lists: as long as you don&#39;t do anything to all of its arguments, they take up only as much space as the items need that have already been evaluated.</p>

<p>There are pitfalls, though: determining the length of a list or sorting it kills laziness - if the list is infinite, it will likely loop infinitely, or fail if the infiniteness can be detected.</p>

<p>In general all conversions to a scalar (like <code>List.join</code>) are <i>eager</i>, i.e. non-lazy.</p>

<p>Laziness prevents unnecessary computations, and can therefore boost performance while keeping code simple.</p>

<p>When you read a file line by line in Perl 5, you don&#39;t use <code>for (&#60;HANDLE&#62;)</code> because it reads all the file into memory, and only then starts iterating. With laziness that&#39;s not an issue:</p>

<pre>    my $file = open &#39;/etc/passwd&#39;;
    for $file.lines -&#62; $line {
        say $line;
    }</pre>

<p>Since <code>$file.lines</code> is a lazy list, the lines are only physically read from disk as needed (besides buffering, of course).</p>

<h4><a class='u'
name="gather/take"
>gather/take</a></h4>

<p>A very useful construct for creating lazy lists is <code>gather { take }</code>. It is used like this:</p>

<pre>    my @list := gather {
        while True {
            # some computations;
            take $result;
        }
    }</pre>

<p><code>gather BLOCK</code> returns a lazy list. When items from <code>@list</code> are needed, the <code>BLOCK</code> is run until <code>take</code> is executed. <code>take</code> is just like return, and all <code>take</code>n items are used to construct <code>@list</code>. When more items from <code>@list</code> are needed, the execution of the block is resumed after <code>take</code>.</p>

<p><code>gather/take</code> is dynamically scoped, so it is possible to call <code>take</code> outside of the lexical scope of the <code>gather</code> block:</p>

<pre>    my @list = gather {
        for 1..10 {
            do_some_computation($_);
        }
    }

    sub do_some_computation($x) {
        take $x * ($x + 1);
    }</pre>

<p>Note that <code>gather</code> can act on a single statement instead of a block too:</p>

<pre>    my @list = gather for 1..10 {
        do_some_computation($_);
    }</pre>

<h4><a class='u'
name="Controlling_Laziness"
>Controlling Laziness</a></h4>

<p>Laziness has its problems (and when you try to learn Haskell you&#39;ll notice how weird their IO system is because Haskell is both lazy and free of side effects), and sometimes you don&#39;t want stuff to be lazy. In this case you can just prefix it with <code>eager</code>.</p>

<pre>    my @list = eager map { $block_with_side_effects }, @list;</pre>

<p>On the other hand only lists are lazy by default. But you can also make lazy scalars:</p>

<pre>    my $ls = lazy { $expansive_computation };</pre>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>In computer science most problems can be described with a tree of possible combinations, in which a solution is being searched for. The key to efficient algorithms is not only to find an efficient way to search, but also to construct only the interesting parts of the tree.</p>

<p>With lazy lists you can recursively define this tree and search in it, and it automatically constructs only these parts of the tree that you&#39;re actually using.</p>

<p>In general laziness makes programming easier because you don&#39;t have to know if the result of a computation will be used at all - you just make it lazy, and if it&#39;s not used the computation isn&#39;t executed at all. If it&#39;s used, you lost nothing.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S02.html#Lists" class="podlinkurl"
>http://perlcabal.org/syn/S02.html#Lists</a></p>


<h2 id="post_13">Custom Operators</h2>
<p>Sat Oct 18 22:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 13 - Custom Operators</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    multi sub postfix:&#60;!&#62;(Int $x) {
        my $factorial = 1;
        $factorial *= $_ for 2..$x;
        return $factorial;
    }
    
    say 5!;                     # 120</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Operators are functions with unusual names, and a few additional properties like precedence and associativity. Perl 6 usually follows the pattern <code>term infix term</code>, where <code>term</code> can be optionally preceded by prefix operators and followed by postfix or postcircumfix operators.</p>

<pre>    1 + 1               infix
    +1                  prefix
    $x++                postfix
    &#60;a b c&#62;             circumfix
    @a[1]               postcircumfix</pre>

<p>Operator names are not limited to &#34;special&#34; characters, they can contain anything except whitespace.</p>

<p>The long name of an operator is its type, followed by a colon and a string literal or list of the symbol or symbols, for example <code>infix:&#60;+&#62;</code> is the the operator in <code>1+2</code>. Another example is <code>postcircumfix:&#60;[ ]&#62;</code>, which is the operator in <code>@a[0]</code>.</p>

<p>With this knowledge you can already define new operators:</p>

<pre>    multi sub prefix:&#60;&#8364;&#62; (Str $x) {
        2 *  $x;
    }
    say &#8364;4;                         # 8</pre>

<h4><a class='u'
name="Precedence"
>Precedence</a></h4>

<p>In an expression like <code>$a + $b * $c</code> the <code>infix:&#60;*&#62;</code> operator has tighter precedence than <code>infix:&#60;+&#62;</code>, which is why the expression is evaluated as <code>$a + ($b * $c)</code>.</p>

<p>The precedence of a new operator can be specified in comparison to to existing operators:</p>

<pre>    multi sub infix:&#60;foo&#62; is equiv(&#38;infix:&#60;+&#62;) { ...  }
    mutli sub infix:&#60;bar&#62; is tighter(&#38;infix:&#60;+&#62;) { ... }
    mutli sub infix:&#60;baz&#62; is looser(&#38;infix:&#60;+&#62;) { ... }</pre>

<h4><a class='u'
name="Associativity"
>Associativity</a></h4>

<p>Most infix operators take only two arguments. In an expression like <code>1 / 2 / 4</code> the <i>associativity</i> of the operator decides the order of evaluation. The <code>infix:&#60;/&#62;</code> operator is left associative, so this expression is parsed as <code>(1 / 2) / 4</code>. for a right associative operator like <code>infix:&#60;**&#62;</code> (exponentiation) <code>2 ** 2 ** 4</code> is parsed as <code>2 ** (2 ** 4)</code>.</p>

<p>Perl 6 has more associativities: <code>none</code> forbids chaining of operators of the same precedence (for example <code>2 &#60;=&#62; 3 &#60;=&#62; 4</code> is forbidden), and <code>infix:&#60;,&#62;</code> has <code>list</code> associativity. <code>1, 2, 3</code> is translated to <code>infix:&#60;,&#62;(1; 2; 3)</code>. Finally there&#39;s the <code>chain</code> associativity: <code>$a &#60; $b &#60; $c</code> translates to <code>($a &#60; $b) &#38;&#38; ($b &#60; $c)</code>.</p>

<pre>    multi sub infix:&#60;foo&#62; is tighter(&#38;infix:&#60;+&#62;)
                          is assoc(&#39;left&#39;)
                          ($a, $b) {
        ...
    }</pre>

<h4><a class='u'
name="Postcircumfix_and_Circumfix"
>Postcircumfix and Circumfix</a></h4>

<p>Postcircumfix operators are method calls:</p>

<pre>    class OrderedHash is Hash {
        method postcircumfix:&#60;{ }&#62;(Str $key) {
            ...
        }
    }</pre>

<p>If you call that as <code>$object{$stuff}</code>, <code>$stuff</code> will be passed as an argument to the method, and <code>$object</code> is available as <code>self</code>.</p>

<p>Circumfix operators usually imply a different syntax (like in <code>my @list = &#60;a b c&#62;;</code>), and are thus implemented as macros:</p>

<pre>    macro circumfix:&#171;&#60; &#62;&#187;($text) is parsed / &#60;-[&#62;]&#62;+ / {
        return $text.comb(rx/\S+/);
    }</pre>

<p>The <code>is parsed</code> trait is followed by a regex that parses everything between the delimiters. If no such rule is given, it is parsed as normal Perl 6 code (which is usually not what you want if you introduce a new syntax). <code>Str.comb</code> searches for occurrences of a regex and returns a list of the text of all matches.</p>

<h4><a class='u'
name="&#34;Overload&#34;_existing_operators"
>&#34;Overload&#34; existing operators</a></h4>

<p>Most (if not all) existing operators are multi subs or methods, and can therefore be customized for new types. Adding a multi sub is the way of &#34;overloading&#34; operators.</p>

<pre>    class MyStr { ... }
    multi sub infix:&#60;~&#62;(MyStr $this, Str $other) { ... }</pre>

<p>This means that you can write objects that behave just like the built in &#34;special&#34; objects like <code>Str</code>, <code>Int</code> etc.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Allowing the user to declare new operators and &#34;overload&#34; existing ones makes user defined types just as powerful and useful as built in types. If the built in ones turn out to be insufficient, you can replace them with new ones that better fit your situation, without changing anything in the compiler.</p>

<p>It also removes the gap between using a language and modifying the language.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S06.html#Operator_overloading" class="podlinkurl"
>http://perlcabal.org/syn/S06.html#Operator_overloading</a></p>

<p>If you are interested in the technical background, ie how Perl 6 can implement such operator changes and other grammar changes, read <a href="http://perlgeek.de/en/article/mutable-grammar-for-perl-6" class="podlinkurl"
>http://perlgeek.de/en/article/mutable-grammar-for-perl-6</a>.</p>


<h2 id="post_14">The MAIN sub</h2>
<p>Sun Oct 19 22:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 14 - The MAIN sub</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>  # file doit.pl

  #!/usr/bin/perl6
  sub MAIN($path, :$force, :$recursive, :$home = &#39;~/&#39;) {
      # do stuff here
  }

  # command line
  $ ./doit.pl --force --home=/home/someoneelse file_to_process</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Calling subs and running a typical Unix program from the command line is visually very similar: you can have positional, optional and named arguments.</p>

<p>You can benefit from it, because Perl 6 can process the command line for you, and turn it into a sub call. Your script is normally executed (at which time it can munge the command line arguments stored in <code>@*ARGS</code>), and then the sub <code>MAIN</code> is called, if it exists.</p>

<p>If the sub can&#39;t be called because the command line arguments don&#39;t match the formal parameters of the <code>MAIN</code> sub, an automatically generated usage message is printed.</p>

<p>Command line options map to subroutine arguments like this:</p>

<pre>  -name                   :name
  -name=value             :name&#60;value&#62;

  # remember, &#60;...&#62; is like qw(...)
  --hackers=Larry,Damian  :hackers&#60;Larry Damian&#62;  

  --good_language         :good_language
  --good_lang=Perl        :good_lang&#60;Perl&#62;
  --bad_lang PHP          :bad_lang&#60;PHP&#62;

  +stuff                  :!stuff
  +stuff=healty           :stuff&#60;healthy&#62; but False</pre>

<p>The <code>$x = $obj but False</code> means that <code>$x</code> is a copy of <code>$obj</code>, but gives <code>Bool::False</code> in boolean context.</p>

<p>So for simple (and some not quite simple) cases you don&#39;t need an external command line processor, but you can just use sub <code>MAIN</code> for that.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>The motivation behind this should be quite obvious: it makes simple things easier, similar things similar, and in many cases reduces command line processing to a single line of code: the signature of <code>MAIN</code>.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S06.html#Declaring_a_MAIN_subroutine" class="podlinkurl"
>http://perlcabal.org/syn/S06.html#Declaring_a_MAIN_subroutine</a> contains the specification.</p>


<h2 id="post_15">Twigils</h2>
<p>Mon Oct 20 22:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 15 - Twigils</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>  class Foo {
      has $.bar;
      has $!baz;
  }

  my @stuff = sort { $^b[1] &#60;=&#62; $^a[1]}, [1, 2], [0, 3], [4, 8];
  my $block = { say &#34;This is the named &#39;foo&#39; parameter: $:foo&#34; };
  $block(:foo&#60;bar&#62;);

  say &#34;This is file $?FILE on line $?LINE&#34;

  say &#34;A CGI script&#34; if %*ENV.exists(&#39;DOCUMENT_ROOT&#39;);</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Some variables have a second sigil, called <i>twigil</i>. It basically means that the variable isn&#39;t &#34;normal&#34;, but differs in some way, for example it could be differently scoped.</p>

<p>You&#39;ve already seen that public and private object attributes have the <code>.</code> and <code>!</code> twigil respectively; they are not normal variables, they are tied to <code>self</code>.</p>

<p>The <code>^</code> twigil removes a special case from perl 5. To be able to write</p>

<pre>  # beware: perl 5 code
  sort { $a &#60;=&#62; $b } @array</pre>

<p>the variables <code>$a</code> and <code>$b</code> are special cased by the <code>strict</code> pragma. In Perl 6, there&#39;s a concept named <i>self-declared positional parameter</i>, and these parameters have the <code>^</code> twigil. It means that they are positional parameters of the current block, without being listed in a signature. The variables are filled in lexicographic (alphabetic) order:</p>

<pre>  my $block = { say &#34;$^c $^a $^b&#34; };
  $block(1, 2, 3);                # 3 1 2</pre>

<p>So now you can write</p>

<pre>  @list = sort { $^b &#60;=&#62; $^a }, @list;
  # or:
  @list = sort { $^foo &#60;=&#62; $^bar }, @list;</pre>

<p>Without any special cases.</p>

<p>And to keep the symmetry between positional and named arguments, the <code>:</code> twigil does the same for named parameters, so these lines are roughly equivalent:</p>

<pre>  my $block = { say $:stuff }
  my $sub   = sub (:$stuff) { say $stuff }</pre>

<p>The <code>?</code> twigil stands for variables and constants that are known at compile time, like <code>$?LINE</code> for the current line number (formerly <code>__LINE__</code>), and <code>$?DATA</code> is the file handle to the <code>DATA</code> section.</p>

<p>Contextual variables can be accessed with the <code>*</code> twigil, so <code>$*IN</code> and <code>$*OUT</code> can be overridden dynamically.</p>

<p>A pseudo twigil is <code>&#60;</code>, which is used in a construct like <code>$&#60;capture&#62;</code>, where it is a shorthand for <code>$/&#60;capture&#62;</code>, which accesses the Match object after a regex match.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>When you read Perl 5&#39;s <code>perlvar</code> document, you can see that it has far too many variables, most of them global, that affect your program in various ways.</p>

<p>The twigils try to bring some order in these special variables, and at the other hand they remove the need for special cases. In the case of object attributes they shorten <code>self.var</code> to <code>$.var</code> (or <code>@.var</code> or whatever).</p>

<p>So all in all the increased &#34;punctuation noise&#34; actually makes the programs much more consistent and readable.</p>


<h2 id="post_16">Enums</h2>
<p>Wed Nov 26 23:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 16 - Enums</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>  enum bit Bool &#60;False True&#62;;
  my $value = $arbitrary_value but True;
  if $value {
      say &#34;Yes, it&#39;s true&#34;;       # will be printed
  }

  enum Day (&#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;, &#39;Sun&#39;);
  if custom_get_date().Day == Day::Sat | Day::Sun {
      say &#34;Weekend&#34;;
  }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Enums are versatile beasts. They are low-level classes that consist of an enumeration of constants, typically integers or strings (but can be arbitrary).</p>

<p>These constants can act as subtypes, methods or normal values. They can be attached to an object with the <code>but</code> operator, which &#34;mixes&#34; the enum into the value:</p>

<pre>  my $x = $today but Day::Tue;</pre>

<p>You can also use the type name of the Enum as a function, and supply the value as an argument:</p>

<pre>  $x = $today but Day($weekday);</pre>

<p>Afterwards that object has a method with the name of the enum type, here <code>Day</code>:</p>

<pre>  say $x.Day;             # 1</pre>

<p>The value of first constant is 0, the next 1 and so on, unless you explicitly provide another value with pair notation:</p>

<pre>  Enum Hackers (:Larry&#60;Perl&#62;, :Guido&#60;Python&#62;, :Paul&#60;Lisp&#62;);</pre>

<p>You can check if a specific value was mixed in by using the versatile smart match operator, or with <code>.does</code>:</p>

<pre>  if $today ~~ Day::Fri {
      say &#34;Thank Christ it&#39;s Friday&#34;
  }
  if $today.does(Fri) { ... }</pre>

<p>Note that you can specify the name of the value only (like <code>Fri</code>) if that&#39;s unambiguous, if it&#39;s ambiguous you have to provide the full name <code>Day::Fri</code>.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Enums replace both the &#34;magic&#34; that is involved with tainted variables in Perl 5 and the <code>return &#34;0 but True&#34;</code> hack (a special case for which no warning is emitted if used as a number). Plus they give a <code>Bool</code> type.</p>

<p>Enums also provide the power and flexibility of attaching arbitrary meta data for debugging or tracing.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S12.html#Enumerations" class="podlinkurl"
>http://perlcabal.org/syn/S12.html#Enumerations</a></p>


<h2 id="post_17">Unicode</h2>
<p>Thu Nov 27 23:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 17 - Unicode</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>  (none)    </pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl 5&#39;s Unicode model suffers from a big weakness: it uses the same type for binary and for text data. For example if your program reads 512 bytes from a network socket, it is certainly a byte string. However when (still in Perl 5) you call <code>uc</code> on that string, it will be treated as text. The recommended way is to decode that string first, but when a subroutine receives a string as an argument, it can never surely know if it had been encoded or not, ie if it is to be treated as a blob or as a text.</p>

<p>Perl 6 on the other hand offers the type <code>buf</code>, which is just a collection of bytes, and <code>Str</code>, which is a collection of logical characters.</p>

<p><i>Logical character</i> is still a vague term. To be more precise a <code>Str</code> is an object that can be viewed at different levels: <code>Byte</code>, <code>Codepoint</code> (anything that the Unicode Consortium assigned a number to is a codepoint), <code>Grapheme</code> (things that visually appear as a character) and <code>CharLingua</code> (language defined characters).</p>

<p>For example the string with the hex bytes <code>61 cc 80</code> consists of three bytes (obviously), but can also be viewed as being consisting of two codepoints with the names <code>LATIN SMALL LETTER A</code> (U+0041) and <code>COMBINING GRAVE ACCENT</code> (U+0300), or as one grapheme that, if neither my blog software nor your browser kill it, looks like this: <code>&#224;</code>.</p>

<p>So you can&#39;t simply ask for the length of a string, you have to ask for a specific length:</p>

<pre>  $str.bytes;
  $str.codes;
  $str.graphs;</pre>

<p>There&#39;s also method named <code>chars</code>, which returns the length in the current Unicode level (which can be set by a pragma like <code>use bytes</code>, and which defaults to graphemes).</p>

<p>In Perl 5 you sometimes had the problem of accidentally concatenating byte strings and text strings. If you should ever suffer from that problem in Perl 6, you can easily identify where it happens by overloading the concatenation operator:</p>

<pre>  sub GLOBAL::infix:&#60;~&#62; is deep (Str $a, buf $b)|(buf $b, Str $a) {
      die &#34;Can&#39;t concatenate text string &#171;&#34;
          ~ $a.encode(&#34;UTF-8&#34;)
            &#34;&#187; with byte string &#171;$b&#187;\n&#34;;
  }</pre>

<h4><a class='u'
name="Encoding_and_Decoding"
>Encoding and Decoding</a></h4>

<p>The specification of the IO system is very basic and does not yet define any encoding and decoding layers, which is why this article has no useful SYNOPSIS section. I&#39;m sure that there will be such a mechanism, and I could imagine it will look something like this:</p>

<pre>  my $handle = open($filename, :r, :encoding&#60;UTF-8&#62;);</pre>

<h4><a class='u'
name="Regexes_and_Unicode"
>Regexes and Unicode</a></h4>

<p>Regexes can take modifiers that specify their Unicode level, so <code>m:codes/./</code> will match exactly one codepoint. In the absence of such modifiers the current Unicode level will be used.</p>

<p>Character classes like <code>\w</code> (match a word character) behave accordingly to the Unicode standard. There are modifiers that ignore case (<code>:i</code>) and accents (<code>:a</code>), and modifiers for the substitution operators that can carry case information to the substitution string (<code>:samecase</code> and <code>:sameaccent</code>, short <code>:ii</code>, <code>:aa</code>).</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>It is quite hard to correctly process strings with most tools and most programming languages these days. Suppose you have a web application in perl 5, and you want to break long words automatically so that they don&#39;t mess up your layout. When you use naive <code>substr</code> to do that, you might accidentally rip graphemes apart.</p>

<p>Perl 6 will be the first mainstream programming language with built in support for grapheme level string manipulation, which basically removes most Unicode worries, and which (in conjunction with regexes) makes Perl 6 one of the most powerful languages for string processing.</p>

<p>The separate data types for text and byte strings make debugging and introspection quite easy.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S32/Str.html" class="podlinkurl"
>http://perlcabal.org/syn/S32/Str.html</a></p>


<h2 id="post_18">Scoping</h2>
<p>Fri Nov 28 23:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 18 - Scoping</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    for 1 .. 10 -&#62; $a {
        # $a visible here
    }
    # $a not visible here

    while my $b = get_stuff() {
        # $b visible here
    }
    # $b still visible here

    my $c = 5;
    {
        my $c = $c;
        # $c is undef here
    }
    # $c is 5 here

    my $y;
    my $x = $y + 2 while $y = calc();
    # $x still visible</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<h4><a class='u'
name="Lexical_Scoping"
>Lexical Scoping</a></h4>

<p>Scoping in Perl 6 is quite similar to that of Perl 5. A Block introduces a new lexical scope. A variable name is searched in the innermost lexical scope first, if it&#39;s not found it is then searched for in the next outer scope and so on. Just like in Perl 5 a <code>my</code> variable is a proper lexical variable, and an <code>our</code> declaration introduces a lexical alias for a package variable.</p>

<p>But there are subtle differences: variables are exactly visible in the rest of the block where they are declared, variables declared in block headers (for example in the condition of a <code>while</code> loop) are not limited to the block afterwards.</p>

<p>Also Perl 6 only ever looks up unqualified names (variables and subroutines) in lexical scopes.</p>

<p>If you want to limit the scope, you can use formal parameters to the block:</p>

<pre>    if calc() -&#62; $result {
        # you can use $result here
    }
    # $result not visible here</pre>

<p>Variables are visible immediately after they are declared, not at the end of the statement as in Perl 5.</p>

<pre>    my $x = .... ;
            ^^^^^
            $x visible here in Perl 6
            but not in Perl 5</pre>

<h4><a class='u'
name="Dynamic_scoping"
>Dynamic scoping</a></h4>

<p>The <code>local</code> adjective is now called <code>temp</code>, and if it&#39;s not followed by an initialization the previous value of that variable is used (not <code>undef</code>).</p>

<p>There&#39;s also a new kind of dynamically scoped variable called a <i>hypothetical</i> variable. If the block is left with an exception, then the previous value of the variable is restored. If not, it is kept.</p>

<h4><a class='u'
name="Context_variables"
>Context variables</a></h4>

<p>Some variables that are global in Perl 5 (<code>$!</code>, <code>$_</code>) are <i>context</i> variables in Perl 6, that is they are passed between dynamic scopes.</p>

<p>This solves an old Problem in Perl 5. In Perl 5 an <code>DESTROY</code> sub can be called at a block exit, and accidentally change the value of a global variable, for example one of the error variables:</p>

<pre>   # Broken Perl 5 code here:
   sub DESTROY { eval { 1 }; }
   
   eval {
       my $x = bless {};
       die &#34;Death\n&#34;;
   };
   print $@ if $@;         # No output here</pre>

<p>In Perl 6 this problem is avoided by not implicitly using global variables.</p>

<p>(In Perl 5.14 there is a workaround that protects <code>$@</code> from being modified, thus averting the most harm from this particular example.)</p>

<h4><a class='u'
name="Pseudo-packages"
>Pseudo-packages</a></h4>

<p>If a variable is hidden by another lexical variable of the same name, it can be accessed with the <code>OUTER</code> pseudo package</p>

<pre>    my $x = 3;
    {
        my $x = 10;
        say $x;             # 10
        say $OUTER::x;      # 3
        say OUTER::&#60;$x&#62;     # 3
    }</pre>

<p>Likewise a function can access variables from its caller with the <code>CALLER</code> and <code>CONTEXT</code> pseudo packages. The difference is that <code>CALLER</code> only accesses the scope of the immediate caller, <code>CONTEXT</code> works like UNIX environment variables (and should only be used internally by the compiler for handling <code>$_</code>, <code>$!</code> and the like). To access variables from the outer dynamic scope they must be declared with <code>is context</code>.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>It is now common knowledge that global variables are really bad, and cause lots of problems. We also have the resources to implement better scoping mechanism. Therefore global variables are only used for inherently global data (like <code>%*ENV</code> or <code>$*PID</code>).</p>

<p>The block scoping rules haven been greatly simplified.</p>

<p>Here&#39;s a quote from Perl 5&#39;s <code>perlsyn</code> document; we don&#39;t want similar things in Perl 6:</p>

<pre> NOTE: The behaviour of a &#34;my&#34; statement modified with a statement
 modifier conditional or loop construct (e.g. &#34;my $x if ...&#34;) is
 undefined.  The value of the &#34;my&#34; variable may be &#34;undef&#34;, any
 previously assigned value, or possibly anything else.  Don&#39;t rely on
 it.  Future versions of perl might do something different from the
 version of perl you try it out on.  Here be dragons.</pre>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p>S04 discusses block scoping: <a href="http://perlcabal.org/syn/S04.html" class="podlinkurl"
>http://perlcabal.org/syn/S04.html</a>.</p>

<p>S02 lists all pseudo packages and explains context scoping: <a href="http://perlcabal.org/syn/S02.html#Names" class="podlinkurl"
>http://perlcabal.org/syn/S02.html#Names</a>.</p>


<h2 id="post_19">Regexes strike back</h2>
<p>Sat Nov 29 23:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 19 - Regexes strike back</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    # normal matching:
    if &#39;abc&#39; ~~ m/../ {
        say $/;                 # ab
    }

    # match with implicit :sigspace modifier
    if &#39;ab cd ef&#39;  ~~ mm/ (..) ** 2 / {
        say $1;                 # cd
    }

    # substitute with the :sigspace modifier
    my $x = &#34;abc     defg&#34;;
    $x ~~ ss/c d/x y/;
    say $x;                     # abx     yefg</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Since the basics of regexes are already covered in lesson 07, here are some useful (but not very structured) additional facts about Regexes.</p>

<h4><a class='u'
name="Matching"
>Matching</a></h4>

<p>You don&#39;t need to write grammars to match regexes, the traditional form <code>m/.../</code> still works, and has a new brother, the <code>mm/.../</code> form, which implies the <code>:sigspace</code> modifier. Remember, that means that whitespaces in the regex are substituted by the <code>&#60;.ws&#62;</code> rule.</p>

<p>The default for the rule is to match <code>\s+</code> if it is surrounded by two word-characters (ie those matching those <code>\w</code>), and <code>\s*</code> otherwise.</p>

<p>In substitutions the <code>:samespace</code> modifier takes care that whitespaces matched with the <code>ws</code> rule are preserved. Likewise the <code>:samecase</code> modifier, short <code>:ii</code> (since it&#39;s a variant of <code>:i</code>) preserve case.</p>

<pre>    my $x = &#39;Abcd&#39;;
    $x ~~ s:ii/^../foo/;
    say $x;                     # Foocd
    $x = &#39;ABC&#39;
    $x ~~ s:ii/^../foo/;
    say $x                      # FOO</pre>

<p>This is very useful if you want to globally rename your module <code>Foo</code>, to <code>Bar</code>, but for example in environment variables it is written as all uppercase. With the <code>:ii</code> modifier the case is automatically preserved.</p>

<p>It copies case information on a character by character. But there&#39;s also a more intelligent version; when combined with the <code>:sigspace</code> (short <code>:s</code>) modifier, it tries to find a pattern in the case information of the source string. Recognized are <code>.lc</code>, <code>.uc</code>, <code>.lc.ucfirst</code>, <code>.uc.lcfirst</code> and <code>.lc.capitaliz</code> (<code>Str.capitalize</code> uppercases the first character of each word). If such a pattern is found, it is also applied to the substitution string.</p>

<pre>    my $x = &#39;The Quick Brown Fox&#39;;
    $x ~~ s :s :ii /brown.*/perl 6 developer/;
    # $x is now &#39;The Quick Perl 6 Developer&#39;</pre>

<h4><a class='u'
name="Alternations"
>Alternations</a></h4>

<p>Alternations are still formed with the single bar <code>|</code>, but it means something else than in Perl 5. Instead of sequentially matching the alternatives and taking the first match, it now matches all alternatives in parallel, and takes the longest one.</p>

<pre>    &#39;aaaa&#39; ~~ m/ a | aaa | aa /;
    say $/                          # aaa</pre>

<p>While this might seem like a trivial change, it has far reaching consequences, and is crucial for extensible grammars. Since Perl 6 is parsed using a Perl 6 grammar, it is responsible for the fact that in <code>++$a</code> the <code>++</code> is parsed as a single token, not as two <code>prefix:&#60;+&#62;</code> tokens.</p>

<p>The old, sequential style is still available with <code>||</code>:</p>

<pre>    grammar Math::Expression {
        token value {
            | &#60;number&#62;
            | &#39;(&#39; 
              &#60;expression&#62; 
              [ &#39;)&#39; || { fail(&#34;Parenthesis not closed&#34;) } ]
        }

        ...
    }</pre>

<p>The <code>{ ... }</code> execute a closure, and calling <code>fail</code> in that closure makes the expression fail. That branch is guaranteed to be executed only if the previous (here the <code>&#39;)&#39;</code>) fails, so it can be used to emit useful error messages while parsing.</p>

<p>There are other ways to write alternations, for example if you &#34;interpolate&#34; an array, it will match as an alternation of its values:</p>

<pre>    $_ = &#39;12 oranges&#39;;
    my @fruits = &#60;apple organge banana kiwi&#62;;
    if m:i:s/ (\d+) (@fruits)s? / {
        say &#34;You&#39;ve got $0 $1, I&#39;ve got { $0 + 2 } of them. You lost.&#34;;
    }</pre>

<p>There is yet another construct that automatically matches the longest alternation: multi regexes. They can be either written as <code>multi token name</code> or with a <code>proto</code>:</p>

<pre>    grammar Perl {
        ...
        proto token sigil { ... }
        token sigil:sym&#60;$&#62; { &#60;sym&#62; }
        token sigil:sym&#60;@&#62; { &#60;sym&#62; }
        token sigil:sym&#60;%&#62; { &#60;sym&#62; }
        ...

       token variable { &#60;sigil&#62; &#60;twigil&#62;? &#60;identifier&#62; }
   }</pre>

<p>This example shows multiple tokens called <code>sigil</code>, which are parameterized by <code>sym</code>. When the short name, ie <code>sigil</code> is used, all of these tokens are matched in an alternation. You may think that this is a very inconvenient way to write an alternation, but it has a huge advantage over writing <code>&#39;$&#39;|&#39;@&#39;|&#39;%&#39;</code>: it is easily extensible:</p>

<pre>    grammar AddASigil is Perl {
        token sigil:sym&#60;!&#62; { &#60;sym&#62; }
    }
    # wow, we have a Perl 6 grammar with an additional sigil!</pre>

<p>Likewise you can override existing alternatives:</p>

<pre>    grammar WeirdSigil is Perl {
        token sigil:sym&#60;$&#62; { &#39;&#176;&#39; }
    }</pre>

<p>In this grammar the sigil for scalar variables is <code>&#176;</code>, so whenever the grammar looks for a sigil it searches for a <code>&#176;</code> instead of a <code>$</code>, but the compiler will still know that it was the regex <code>sigil:sym&#60;$&#62;</code> that matched it.</p>

<p>In the next lesson you&#39;ll see the development of a real, working grammar with Rakudo.</p>


<h2 id="post_20">A grammar for (pseudo) XML</h2>
<p>Fri Dec  5 23:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 20 - A grammar for (pseudo) XML</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    grammar XML {
        token TOP   { ^ &#60;xml&#62; $ };
        token xml   { &#60;text&#62; [ &#60;tag&#62; &#60;text&#62; ]* };
        token text {  &#60;-[&#60;&#62;&#38;]&#62;* };
        rule tag   {
            &#39;&#60;&#39;(\w+) &#60;attributes&#62;*
            [
                | &#39;/&#62;&#39;                 # a single tag
                | &#39;&#62;&#39;&#60;xml&#62;&#39;&#60;/&#39; $0 &#39;&#62;&#39;  # an opening and a closing tag
            ]
        };
        token attributes { \w+ &#39;=&#34;&#39; &#60;-[&#34;&#60;&#62;]&#62;* &#39;&#34;&#39; };
    };</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>So far the focus of these articles has been the Perl 6 language, independently of what has been implemented so far. To show you that it&#39;s not a purely fantasy language, and to demonstrate the power of grammars, this lesson shows you the development of a grammar that parses basic XML, and that runs with Rakudo.</p>

<p>Please follow the instructions on <a href="http://rakudo.org/how-to-get-rakudo/" class="podlinkurl"
>http://rakudo.org/how-to-get-rakudo/</a> to obtain and build Rakudo, and try it out yourself.</p>

<h4><a class='u'
name="Our_idea_of_XML"
>Our idea of XML</a></h4>

<p>For our purposes XML is quite simple: it consists of plain text and nested tags that can optionally have attributes. So here are few tests for what we want to parse as valid &#34;XML&#34;, and what not:</p>

<pre>    my @tests = (
        [1, &#39;abc&#39;                       ],      # 1
        [1, &#39;&#60;a&#62;&#60;/a&#62;&#39;                   ],      # 2
        [1, &#39;..&#60;ab&#62;foo&#60;/ab&#62;dd&#39;          ],      # 3
        [1, &#39;&#60;a&#62;&#60;b&#62;c&#60;/b&#62;&#60;/a&#62;&#39;           ],      # 4
        [1, &#39;&#60;a href=&#34;foo&#34;&#62;&#60;b&#62;c&#60;/b&#62;&#60;/a&#62;&#39;],      # 5
        [1, &#39;&#60;a empty=&#34;&#34; &#62;&#60;b&#62;c&#60;/b&#62;&#60;/a&#62;&#39; ],      # 6
        [1, &#39;&#60;a&#62;&#60;b&#62;c&#60;/b&#62;&#60;c&#62;&#60;/c&#62;&#60;/a&#62;&#39;    ],      # 7
        [0, &#39;&#60;&#39;                         ],      # 8
        [0, &#39;&#60;a&#62;b&#60;/b&#62;&#39;                  ],      # 9
        [0, &#39;&#60;a&#62;b&#60;/a&#39;                   ],      # 10
        [0, &#39;&#60;a&#62;b&#60;/a href=&#34;&#34;&#62;&#39;          ],      # 11
        [1, &#39;&#60;a/&#62;&#39;                      ],      # 12
        [1, &#39;&#60;a /&#62;&#39;                     ],      # 13
    );

    my $count = 1;
    for @tests -&#62; $t {
        my $s = $t[1];
        my $M = XML.parse($s);
        if !($M  xor $t[0]) {
            say &#34;ok $count - &#39;$s&#39;&#34;;
        } else {
            say &#34;not ok $count - &#39;$s&#39;&#34;;
        }
        $count++;
    }</pre>

<p>This is a list of both &#34;good&#34; and &#34;bad&#34; XML, and a small test script that runs these tests by calling <code>XML.parse($string)</code>. By convention the rule that matches what the grammar should match is named <code>TOP</code>.</p>

<p>(As you can see from test 1 we don&#39;t require a single root tag, but it would be trivial to add this restriction).</p>

<h4><a class='u'
name="Developing_the_grammar"
>Developing the grammar</a></h4>

<p>The essence of XML is surely the nesting of tags, so we&#39;ll focus on the second test first. Place this at the top of the test script:</p>

<pre>    grammar XML {
        token TOP   { ^ &#60;tag&#62; $ }
        token tag   {
            &#39;&#60;&#39; (\w+) &#39;&#62;&#39;
            &#39;&#60;/&#39; $0   &#39;&#62;&#39;
        }
    };</pre>

<p>Now run the script:</p>

<pre>    $ ./perl6 xml-01.pl
    not ok 1 - &#39;abc&#39;
    ok 2 - &#39;&#60;a&#62;&#60;/a&#62;&#39;
    not ok 3 - &#39;..&#60;ab&#62;foo&#60;/ab&#62;dd&#39;
    not ok 4 - &#39;&#60;a&#62;&#60;b&#62;c&#60;/b&#62;&#60;/a&#62;&#39;
    not ok 5 - &#39;&#60;a href=&#34;foo&#34;&#62;&#60;b&#62;c&#60;/b&#62;&#60;/a&#62;&#39;
    not ok 6 - &#39;&#60;a empty=&#34;&#34; &#62;&#60;b&#62;c&#60;/b&#62;&#60;/a&#62;&#39;
    not ok 7 - &#39;&#60;a&#62;&#60;b&#62;c&#60;/b&#62;&#60;c&#62;&#60;/c&#62;&#60;/a&#62;&#39;
    ok 8 - &#39;&#60;&#39;
    ok 9 - &#39;&#60;a&#62;b&#60;/b&#62;&#39;
    ok 10 - &#39;&#60;a&#62;b&#60;/a&#39;
    ok 11 - &#39;&#60;a&#62;b&#60;/a href=&#34;&#34;&#62;&#39;
    not ok 12 - &#39;&#60;a/&#62;&#39;
    not ok 13 - &#39;&#60;a /&#62;&#39;</pre>

<p>So this simple rule parses one pair of start tag and end tag, and correctly rejects all four examples of invalid XML.</p>

<p>The first test should be easy to pass as well, so let&#39;s try this:</p>

<pre>   grammar XML {
       token TOP   { ^ &#60;xml&#62; $ };
       token xml   { &#60;text&#62; | &#60;tag&#62; };
       token text  { &#60;-[&#60;&#62;&#38;]&#62;*  };
       token tag   {
           &#39;&#60;&#39; (\w+) &#39;&#62;&#39;
           &#39;&#60;/&#39; $0   &#39;&#62;&#39;
       }
    };</pre>

<p>(Remember, <code>&#60;-[...]&#62;</code> is a negated character class.)</p>

<p>And run it:</p>

<pre>    $ ./perl6 xml-03.pl
    ok 1 - &#39;abc&#39;
    not ok 2 - &#39;&#60;a&#62;&#60;/a&#62;&#39;
    (rest unchanged)</pre>

<p>Why in the seven hells did the second test stop working? The answer is that Rakudo doesn&#39;t do longest token matching yet (update 2013-01: it does now), but matches sequentially. <code>&#60;text&#62;</code> matches the empty string (and thus always), so <code>&#60;text&#62; | &#60;tag&#62;</code> never even tries to match <code>&#60;tag&#62;</code>. Reversing the order of the two alternations would help.</p>

<p>But we don&#39;t just want to match either plain text or a tag anyway, but random combinations of both of them:</p>

<pre>    token xml   { &#60;text&#62; [ &#60;tag&#62; &#60;text&#62; ]*  };</pre>

<p>(<code>[...]</code> are non-capturing groups, like <code>(?: ... )</code> is in Perl 5).</p>

<p>And low and behold, the first two tests both pass.</p>

<p>The third test, <code>.&#60;ab&#62;foo&#60;/ab&#62;dd</code>, has text between opening and closing tag, so we have to allow that next. But not only text is allowed between tags, but arbitrary XML, so let&#39;s just call <code>&#60;xml&#62;</code> there:</p>

<pre>    token tag   {
        &#39;&#60;&#39; (\w+) &#39;&#62;&#39;
        &#60;xml&#62;
        &#39;&#60;/&#39; $0   &#39;&#62;&#39;
    }

    ./perl6 xml-05.pl
    ok 1 - &#39;abc&#39;
    ok 2 - &#39;&#60;a&#62;&#60;/a&#62;&#39;
    ok 3 - &#39;..&#60;ab&#62;foo&#60;/ab&#62;dd&#39;
    ok 4 - &#39;&#60;a&#62;&#60;b&#62;c&#60;/b&#62;&#60;/a&#62;&#39;
    not ok 5 - &#39;&#60;a href=&#34;foo&#34;&#62;&#60;b&#62;c&#60;/b&#62;&#60;/a&#62;&#39;
    (rest unchanged)</pre>

<p>We can now focus attributes (the <code>href=&#34;foo&#34;</code> stuff):</p>

<pre>    token tag   {
        &#39;&#60;&#39; (\w+) &#60;attribute&#62;* &#39;&#62;&#39;
        &#60;xml&#62;
        &#39;&#60;/&#39; $0   &#39;&#62;&#39;
    };
    token attribute {
        \w+ &#39;=&#34;&#39; &#60;-[&#34;&#60;&#62;]&#62;* \&#34;
    };</pre>

<p>But this doesn&#39;t make any new tests pass. The reason is the blank between the tag name and the attribute. Instead of adding <code>\s+</code> or <code>\s*</code> in many places we&#39;ll switch from <code>token</code> to <code>rule</code>, which implies the <code>:sigspace</code> modifier:</p>

<pre>    rule tag   {
        &#39;&#60;&#39;(\w+) &#60;attribute&#62;* &#39;&#62;&#39;
        &#60;xml&#62;
        &#39;&#60;/&#39;$0&#39;&#62;&#39;
    };
    token attribute {
        \w+ &#39;=&#34;&#39; &#60;-[&#34;&#60;&#62;]&#62;* \&#34;
    };</pre>

<p>Now all tests pass, except the last two:</p>

<pre>    ok 1 - &#39;abc&#39;
    ok 2 - &#39;&#60;a&#62;&#60;/a&#62;&#39;
    ok 3 - &#39;..&#60;ab&#62;foo&#60;/ab&#62;dd&#39;
    ok 4 - &#39;&#60;a&#62;&#60;b&#62;c&#60;/b&#62;&#60;/a&#62;&#39;
    ok 5 - &#39;&#60;a href=&#34;foo&#34;&#62;&#60;b&#62;c&#60;/b&#62;&#60;/a&#62;&#39;
    ok 6 - &#39;&#60;a empty=&#34;&#34; &#62;&#60;b&#62;c&#60;/b&#62;&#60;/a&#62;&#39;
    ok 7 - &#39;&#60;a&#62;&#60;b&#62;c&#60;/b&#62;&#60;c&#62;&#60;/c&#62;&#60;/a&#62;&#39;
    ok 8 - &#39;&#60;&#39;
    ok 9 - &#39;&#60;a&#62;b&#60;/b&#62;&#39;
    ok 10 - &#39;&#60;a&#62;b&#60;/a&#39;
    ok 11 - &#39;&#60;a&#62;b&#60;/a href=&#34;&#34;&#62;&#39;
    not ok 12 - &#39;&#60;a/&#62;&#39;
    not ok 13 - &#39;&#60;a /&#62;&#39;</pre>

<p>These contain un-nested tags that are closed with a single slash <code>/</code>. No problem to add that to rule <code>tag</code>:</p>

<pre>    rule tag   {
        &#39;&#60;&#39;(\w+) &#60;attribute&#62;* [
            | &#39;/&#62;&#39;
            | &#39;&#62;&#39; &#60;xml&#62; &#39;&#60;/&#39;$0&#39;&#62;&#39;
        ]
    };</pre>

<p>All tests pass, we&#39;re happy, our first grammar works well.</p>

<h4><a class='u'
name="More_hacking"
>More hacking</a></h4>

<p>Playing with grammars is much more fun that reading about playing, so here&#39;s what you could implement:</p>

<ul>
<li>plain text can contain entities like <code>&#38;amp;</code></li>

<li>I don&#39;t know if XML tag names are allowed to begin with a number, but the current grammar allows that. You might look it up in the XML specification, and adapt the grammar if needed.</li>

<li>plain text can contain <code>&#60;![CDATA[ ... ]]&#62;</code> blocks, in which xml-like tags are ignored and <code>&#60;</code> and the like don&#39;t need to be escaped</li>

<li>Real XML allows a preamble like <code>&#60;?xml version=&#34;0.9&#34; encoding=&#34;utf-8&#34;?&#62;</code> and requires one root tag which contains the rest (You&#39;d have to change some of the existing test cases)</li>

<li>You could try to implement a pretty-printer for XML by recursively walking through the match object <code>$/</code>. (This is non-trivial; you might have to work around a few Rakudo bugs, and maybe also introduce some new captures).</li>
</ul>

<p>(Please don&#39;t post solutions to this as comments in this blog; let others have the same fun as you had ;-).</p>

<p>Have fun hacking.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>It&#39;s powerful and fun</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p>Regexes are specified in great detail in S05: <a href="http://perlcabal.org/syn/S05.html" class="podlinkurl"
>http://perlcabal.org/syn/S05.html</a>.</p>

<p>More working examples for grammars can be found at <a href="https://github.com/moritz/json/" class="podlinkurl"
>https://github.com/moritz/json/</a> (check file lib/JSON/Tiny/Grammar.pm).</p>


<h2 id="post_21">Subset Types</h2>
<p>Sat Dec  6 23:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 21 - Subset Types</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    subset Squares of Int where { .sqrt.Int**2 == $_ };

    multi sub square_root(Squares $x --&#62; Int) {
        return $x.sqrt.Int;
    }
    multi sub square_root(Num $x --&#62; Num) {
        return $x.sqrt;
    }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Java programmers tend to think of a type as either a class or an interface (which is something like a crippled class), but that view is too limited for Perl 6. A type is more generally a constraint of what a values a container can constraint. The &#34;classical&#34; constraint is <i>it is an object of a class <code>X</code> or of a class that inherits from <code>X</code></i>. Perl 6 also has constraints like <i>the class or the object does role <code>Y</code></i>, or <i>this piece of code returns true for our object</i>. The latter is the most general one, and is called a <i>subset</i> type:</p>

<pre>    subset Even of Int where { $_ % 2 == 0 }
    # Even can now be used like every other type name

    my Even $x = 2;
    my Even $y = 3; # type missmatch error</pre>

<p>(Try it out, Rakudo implements subset types already, but not yet mulit dispatch based on subset types).</p>

<p>You can also use anonymous subtypes in signatures:</p>

<pre>    sub foo (Int where { ... } $x) { ... }
    # or with the variable at the front:
    sub foo ($x of Int where { ... } ) { ... }</pre>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Allowing arbitrary type constraints in the form of code allows ultimate extensibility: if you don&#39;t the current type system, you can just roll your own based on subset types.</p>

<p>It also makes libraries easier to extend: instead of dying on data that can&#39;t be handled, the subs and methods can simple declare their types in a way that &#34;bad&#34; data is rejected by the multi dispatcher. If somebody wants to handle data that the previous implementation rejected as &#34;bad&#34;, he can simple add a multi sub with the same name that accepts the data. For example a math library that handles real numbers could be enhanced this way to also handle complex numbers.</p>


<h2 id="post_22">The State of the implementations</h2>
<p>Sun Dec  7 23:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 22 - The State of the implementations</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    (none)</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p><b>Note:</b> This lesson is long outdated, and preserved for historical interest only. The best way to stay informed about various Perl 6 compilers is to follow the blogs at <a href="http://planetsix.perl.org/" class="podlinkurl"
>http://planetsix.perl.org/</a>.</p>

<p>Perl 6 is a language specification, and there are multiple compilers being written that aim to implement Perl 6, and partially they already do.</p>

<h4><a class='u'
name="Pugs"
>Pugs</a></h4>

<p>Pugs is a Perl 6 compiler written in Haskell. It was started by Audrey Tang, and she also did most of the work. In terms of implemented features it might still be the most advanced implementation today (May 2009).</p>

<p>To build and test pugs, you have to install GHC 6.10.1 first, and then run</p>

<pre>    svn co http://svn.pugscode.org/pugs
    cd pugs
    perl Makefile.PL
    make
    make test</pre>

<p>That will install some Haskell dependencies locally and then build pugs. For <code>make test</code> you might need to install some Perl 5 modules, which you can do with <code>cpan Task::Smoke</code>.</p>

<p>Pugs hasn&#39;t been developed during the last three years, except occasional clean-ups of the build system.</p>

<p>Since the specification is evolving and Pugs is not updated, it is slowly drifting into obsoleteness.</p>

<p>Pugs can parse most common constructs, implements object orientation, basic regexes, nearly(?) all control structures, basic user defined operators and macros, many builtins, contexts (except slice context), junctions, basic multi dispatch and the reduction meta operator - based on the syntax of three years past.</p>

<h4><a class='u'
name="Rakudo"
>Rakudo</a></h4>

<p>Rakudo is a parrot based compiler for Perl 6. The main architect is Patrick Michaud, many features were implemented by Jonathan Worthington.</p>

<p>It is hosted on github, you can find build instructions on <a href="http://rakudo.org/how-to-get-rakudo" class="podlinkurl"
>http://rakudo.org/how-to-get-rakudo</a>.</p>

<p>Rakudo development is very active, it&#39;s the most active Perl 6 compiler today. It passes a bit more than 17,000 tests from the official test suite (July 2009).</p>

<p>It implements most control structures, most syntaxes for number literals, interpolation of scalars and closures, chained operators, <code>BEGIN</code>- and <code>END</code> blocks, pointy blocks, named, optional and slurpy arguments, sophisticated multi dispatch, large parts of the object system, regexes and grammars, Junctions, generic types, parametric roles, typed arrays and hashes, importing and exporting of subroutines and basic meta operators.</p>

<p>If you want to experiment with Perl 6 today, Rakudo is the recommended choice.</p>

<h4><a class='u'
name="Elf"
>Elf</a></h4>

<p>Mitchell Charity started <i>elf</i>, a bootstrapping compiler written in Perl 6, with a grammar written in Ruby. Currently it has a Perl 5 backend, others are in planning.</p>

<p>It lives in the pugs repository, once you&#39;ve checked it out you can go to <code>misc/elf/</code> and run <code>./elf_f $filename</code>. You&#39;ll need ruby-1.9 and some perl modules, about which elf will complain bitterly when they are not present.</p>

<p><code>elf</code> is developed in bursts of activity followed by weeks of low activity, or even none at all.</p>

<p>It parses more than 70% of the test suite, but implements mostly features that are easy to emulate with Perl 5, and passes about 700 tests from the test suite.</p>

<h4><a class='u'
name="KindaPerl6"
>KindaPerl6</a></h4>

<p>Flavio Glock started KindaPerl6 (short kp6), a mostly bootstrapped Perl 6 compiler. Since the bootstrapped version is much too slow to be fun to develop with, it is now waiting for a faster backend.</p>

<p>Kp6 implements object orientation, grammars and a few distinct features like lazy gather/take. It also implements <code>BEGIN</code> blocks, which was one of the design goals.</p>

<h4><a class='u'
name="v6.pm"
>v6.pm</a></h4>

<p><code>v6</code> is a source filter for Perl 5. It was written by Flavio Glock, and supports basic Perl 6 plus grammars. It is fairly stable and fast, and is occasionally enhanced. It lives on the CPAN and in the pugs repository in <code>perl5/*/</code>.</p>

<h4><a class='u'
name="SMOP"
>SMOP</a></h4>

<p>Smop stands for <i>Simple Meta Object Programming</i> and doesn&#39;t plan to implement all of Perl 6, it is designed as a backend (a little bit like parrot, but very different in both design and feature set). Unlike the other implements it aims explicitly at implementing Perl 6&#39;s powerful meta object programming facilities, ie the ability to plug in different object systems.</p>

<p>It is implemented in C and various domain specific languages. It was designed and implemented by Daniel Ruoso, with help from Yuval Kogman (design) and Pawe&#322; Murias (implementation, DSLs). A grant from The Perl Foundation supports its development, and it currently approaches the stage where one could begin to emit code for it from another compiler.</p>

<p>It will then be used as a backend for either elf or kp6, and perhaps also for pugs.</p>

<h4><a class='u'
name="STD.pm"
>STD.pm</a></h4>

<p>Larry Wall wrote a grammar for Perl 6 in Perl 6. He also wrote a cheating script named <code>gimme5</code>, which translates that grammar to Perl 5. It can parse about every written and valid piece of Perl 6 that we know of, including the whole test suite (apart from a few failures now and then when Larry accidentally broke something).</p>

<p>STD.pm lives in the pugs repository, and can be run and tested with perl-5.10.0 installed in <code>/usr/local/bin/perl</code> and a few perl modules (like <code>YAML::XS</code> and <code>Moose</code>):</p>

<pre>    cd src/perl6/
    make
    make testt      # warning: takes lot of time, 80 minutes or so
    ./tryfile $your_file</pre>

<p>It correctly parses custom operators and warns about non-existent subs, undeclared variables and multiple declarations of the same variable as well as about some Perl 5isms.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Many people ask why we need so many different implementations, and if it wouldn&#39;t be better to focus on one instead.</p>

<p>There are basically three answers to that.</p>

<p>Firstly that&#39;s not how programming by volunteers work. People sometimes either want to start something with the tools they like, or they think that one aspect of Perl 6 is not sufficiently honoured by the design of the existing implementations. Then they start a new project.</p>

<p>The second possible answer is that the projects explore different areas of the vast Perl 6 language: SMOP explores meta object programming (from which Rakudo will also benefit), Rakudo and parrot care a lot about efficient language interoperability, grammars and platform independence, kp6 explored BEGIN blocks, and pugs was the first implementation to explore the syntax, and many parts of the language for the first time.</p>

<p>The third answer is that we don&#39;t want a single point of failure. If we had just one implementation, and had severe problems with one of them for unforeseeable reasons (technical, legal, personal, ...) we have possible fallbacks.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p>Pugs: <a href="http://www.pugscode.org/" class="podlinkurl"
>http://www.pugscode.org/</a>, <a href="http://pugs.blogs.com/pugs/2008/07/pugshs-is-back.html" class="podlinkurl"
>http://pugs.blogs.com/pugs/2008/07/pugshs-is-back.html</a>, <a href="http://pugs.blogspot.com" class="podlinkurl"
>http://pugs.blogspot.com</a>, source: <a href="http://svn.pugscode.org/pugs" class="podlinkurl"
>http://svn.pugscode.org/pugs</a>.</p>

<p>Rakudo: <a href="http://rakudo.org/" class="podlinkurl"
>http://rakudo.org/</a>, <a href="http://www.parrot.org/" class="podlinkurl"
>http://www.parrot.org/</a>,</p>

<p>Elf: <a href="http://perl.net.au/wiki/Elf" class="podlinkurl"
>http://perl.net.au/wiki/Elf</a> source: see pugs, <code>misc/elf/</code>.</p>

<p>KindaPerl6: source: see pugs, <code>v6/v6-KindaPerl6</code>.</p>

<p>v6.pm: source: see pugs, <code>perl5/</code>.</p>

<p>STD.pm: source: see pugs, <code>src/perl6/</code>.</p>


<h2 id="post_23">Quoting and Parsing</h2>
<p>Mon Dec  8 23:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 23 - Quoting and Parsing</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    my @animals = &#60;dog cat tiger&#62;
    # or
    my @animals = qw/dog cat tiger/;
    # or 
    
    my $interface = q{eth0};
    my $ips = q :s :x /ifconfig $interface/;

    # -----------

    sub if {
        warn &#34;if() calls a sub\n&#34;;
    }
    if();</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<h4><a class='u'
name="Quoting"
>Quoting</a></h4>

<p>Perl 6 has a powerful mechanism of quoting strings, you have exact control over what features you want in your string.</p>

<p>Perl 5 had single quotes, double quotes and <code>qw(...)</code> (single quotes, splitted on whitespaces) as well as the <code>q(..)</code> and <code>qq(...)</code> forms which are basically synonyms for single and double quotes.</p>

<p>Perl 6 in turn defines a quote operator named <code>Q</code> that can take various modifiers. The <code>:b</code> (<i>backslash</i>) modifier allows interpolation of backslash escape sequences like <code>\n</code>, the <code>:s</code> modifier allows interpolation of scalar variables, <code>:c</code> allows the interpolation of closures (<code>&#34;1 + 2 = { 1 + 2 }&#34;</code>) and so on, <code>:w</code> splits on words as <code>qw/.../</code> does.</p>

<p>You can arbitrarily combine those modifiers. For example you might wish a form of <code>qw/../</code> that interpolates only scalars, but nothing else? No problem:</p>

<pre>    my $stuff = &#34;honey&#34;;
    my @list = Q :w :s/milk toast $stuff with\tfunny\nescapes/;
    say @list[*-1];                     # prints with\nfunny\nescapes</pre>

<p>Here&#39;s a list of what modifiers are available, mostly stolen from S02 directly. All of these also have long names, which I omitted here.</p>

<pre>    Features:
        :q          Interpolate \\, \q and \&#39;
        :b          Other backslash escape sequences like \n, \t
    Operations:
        :x          Execute as shell command, return result
        :w          Split on whitespaces
        :ww         Split on whitespaces, with quote protection
    Variable interpolation
        :s          Interpolate scalars   ($stuff)
        :a          Interpolate arrays    (@stuff[])
        :h          Interpolate hashes    (%stuff{})
        :f          Interpolate functions (&#38;stuff())
    Other
        :c          Interpolate closures  ({code})
        :qq         Interpolate with :s, :a, :h, :f, :c, :b
        :regex      parse as regex</pre>

<p>There are some short forms which make life easier for you:</p>

<pre>    q       Q:q
    qq      Q:qq
    m       Q:regex</pre>

<p>You can also omit the first colon <code>:</code> if the quoting symbol is a short form, and write it as a singe word:</p>

<pre>    symbol      short for
    qw          q:w
    Qw          Q:w
    qx          q:x
    Qc          Q:c
    # and so on.</pre>

<p>However there is one form that does not work, and some Perl 5 programmers will miss it: you can&#39;t write <code>qw(...)</code> with the round parenthesis in Perl 6. It is interpreted as a call to sub <code>qw</code>.</p>

<h4><a class='u'
name="Parsing"
>Parsing</a></h4>

<p>This is where parsing comes into play: Every construct of the form <code>identifier(...)</code> is parsed as sub call. Yes, every.</p>

<pre>    if($x&#60;3)</pre>

<p>is parsed as a call to sub <code>if</code>. You can disambiguate with whitespaces:</p>

<pre>    if ($x &#60; 3) { say &#39;&#60;3&#39; }</pre>

<p>Or just omit the parens altogether:</p>

<pre>    if $x &#60; 3 { say &#39;&#60;3&#39; }</pre>

<p>This implies that Perl 6 has no keywords. Actually there are keywords like <code>use</code> or <code>if</code>, but they are only special if used in a special syntax.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Various combinations of the quoting modifiers are already used internally, for example <code>q:w</code> to parse <code>&#60;...&#62;</code>, and <code>:regex</code> for <code>m/.../</code>. It makes sense to expose these also to the user, who gains flexibility, and can very easily write macros that provide a shortcut for the exact quoting semantics he wants.</p>

<p>And when you limit the specialty of keywords, you have far less troubles with backwards compatibility if you want to change what you consider a &#34;keyword&#34;.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S02.html#Literals" class="podlinkurl"
>http://perlcabal.org/syn/S02.html#Literals</a></p>


<h2 id="post_24">The Reduction Meta Operator</h2>
<p>Tue Dec  9 23:00:00 2008</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 24 - The Reduction Meta Operator</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    say [+] 1, 2, 3;    # 6
    say [+] ();         # 0
    say [~] &#60;a b&#62;;      # ab
    say [**] 2, 3, 4;   # 2417851639229258349412352

    [\+] 1, 2, 3, 4     # 1, 3, 6, 10
    [\**] 2, 3, 4       # 4, 81, 2417851639229258349412352

    if [&#60;=] @list {
        say &#34;ascending order&#34;;
    }</pre>

<h3><a class='u'
name="Description"
>Description</a></h3>

<p>The reduction meta operator <code>[...]</code> can enclose any associative infix operator, and turn it into a list operator. This happens as if the operator was just put between the items of the list, so <code>[op] $i1, $i2, @rest</code> returns the same result as if it was written as <code>$i1 op $i2 op @rest[0] op @rest[1] ...</code>.</p>

<p>This is a very powerful construct that promotes the plus <code>+</code> operator into a <code>sum</code> function, <code>~</code> into a <code>join</code> (with empty separator) and so on. It is somewhat similar to the <code>List.reduce</code> function, and if you had some exposure to functional programming, you&#39;ll probably know about <code>foldl</code> and <code>foldr</code> (in Lisp or Haskell). Unlike those <code>[...]</code> respects the associativity of the enclosed operator, so <code>[/] 1, 2, 3</code> is interpreted as <code>(1 / 2) / 3</code> (left associative), <code>[**] 1, 2, 3</code> is handled correctly as <code>1 ** (2**3)</code> (right associative).</p>

<p>Like all other operators whitespaces are forbidden, so you while you can write <code>[+]</code>, you can&#39;t say <code>[ + ]</code>.</p>

<p>Since comparison operators can be chained, you can also write things like</p>

<pre>    if    [==] @nums { say &#34;all nums in @nums are the same&#34; }
    elsif [&#60;]  @nums { say &#34;@nums is in strict ascending order&#34; }
    elsif [&#60;=] @nums { say &#34;@nums is in ascending order&#34;}</pre>

<p>You can even reduce the assignment operator:</p>

<pre>    my @a = 1..3;
    [=] @a, 4;          # same as @a[0] = @a[1] = @a[2] = 4;</pre>

<p>Note that <code>[...]</code> always returns a scalar, so <code>[,] @list</code> is actually the same as <code>[@list]</code>.</p>

<h4><a class='u'
name="Getting_partial_results"
>Getting partial results</a></h4>

<p>There&#39;s a special form of this operator that uses a backslash like this: <code>[\+]</code>. It returns a list of the partial evaluation results. So <code>[\+] 1..3</code> returns the list <code>1, 1+2, 1+2+3</code>, which is of course <code>1, 3, 6</code>.</p>

<pre>    [\~] &#39;a&#39; .. &#39;d&#39;     # &#60;a ab abc abcd&#62;</pre>

<p>Since right-associative operators evaluate from right to left, you also get the partial results that way:</p>

<pre>    [\**] 1..3;         # 3, 2**3, 1**(2**3), which is 3, 8, 1</pre>

<p>Multiple reduction operators can be combined:</p>

<pre>    [~] [\**] 1..3;     # &#34;381&#34;</pre>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Programmers are lazy, and don&#39;t want to write a loop just to apply a binary operator to all elements of a list. <code>List.reduce</code> does something similar, but it&#39;s not as terse as the meta operator (<code>[+] @list</code> would be <code>@list.reduce(&#38;infix:&#60;+&#62;)</code>), and takes care of the associativity of the operator.</p>

<p>If you&#39;re not convinced, play a bit with it (pugs mostly implements it), it&#39;s real fun.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S03.html#Reduction_operators" class="podlinkurl"
>http://perlcabal.org/syn/S03.html#Reduction_operators</a>, <a href="http://www.perlmonks.org/?node_id=716497" class="podlinkurl"
>http://www.perlmonks.org/?node_id=716497</a></p>


<h2 id="post_25">The Cross Meta Operator</h2>
<p>Tue May 26 22:00:00 2009</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 25 - The Cross Meta Operator</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    for &#60;a b&#62; X 1..3 -&#62; $a, $b {
        print &#34;$a: $b   &#34;;
    }
    # output: a: 1  a: 2  a: 3  b: 1  b: 2  b: 3

    .say for &#60;a b c&#62; X 1, 2;
    # output: a1\n a2\n b1\n b2\n c1\n c2\n
    # (with real newlines instead of \n)</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>The cross operator <code>X</code> returns the Cartesian product of two or more lists, which means that it returns all possible tuples where the first item is an item of the first list, the second item is an item of second list etc.</p>

<p>If an operator follows the <code>X</code>, then this operator is applied to all tuple items, and the result is returned instead. So <code>1, 2 X+ 3, 6</code> will return the values <code>1+3, 1+6, 2+3, 2+6</code> (evaluated as <code>4, 7, 5, 8</code> of course).</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>It&#39;s quite common that one has to iterate over all possible combinations of two or more lists, and the cross operator can condense that into a single iteration, thus simplifying programs and using up one less indentation level.</p>

<p>The usage as a meta operator can sometimes eliminate the loops altogether.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S03.html#Cross_operators" class="podlinkurl"
>http://perlcabal.org/syn/S03.html#Cross_operators</a>,</p>


<h2 id="post_26">Exceptions and control exceptions</h2>
<p>Thu Jul  9 09:00:02 2009</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 26 - Exceptions and control exceptions</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    try {
        die &#34;OH NOEZ&#34;;

        CATCH { 
            say &#34;there was an error: $!&#34;;
        }
    }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Exceptions are, contrary to their name, nothing exceptional. In fact they are part of the normal control flow of programs in Perl 6.</p>

<p>Exceptions are generated either by implicit errors (for example dividing by zero, calling a non-existing method, type check failures) or by explicitly calling <code>die</code> or other functions.</p>

<p>When an exception is thrown, the program searches for <code>CATCH</code> statements or <code>try</code> blocks in the caller frames, unwinding the stack all the way (that means it forcibly returns from all routines called so far). If no <code>CATCH</code> or <code>try</code> is found, the program terminates, and prints out a hopefully helpful error message. If one was found, the error message is stored in the special variable <code>$!</code>, and the <code>CATCH</code> block is executed (or in the case of a <code>try</code> without a CATCH block the try block returns <code>undef</code>).</p>

<p>So far exceptions might still sound exceptional, but error handling is integral part of each non-trivial application. But even more, normal <code>return</code> statements also throw exceptions!</p>

<p>They are called <i>control exceptions</i>, and can be caught with <code>CONTROL</code> blocks, or are implicitly caught at each routine declaration.</p>

<p>Consider this example:</p>

<pre>    use v6;
    my $block = -&#62; { return &#34;block&#34;; say &#34;still here&#34; };

    sub s {
        $block.();
        return &#34;sub&#34;;
    }

    say s();</pre>

<p>Here the <code>return &#34;block&#34;</code> throws a control exception, causing it to not only exit the current block (and thus not printing <code>still here</code> on the screen), but also exiting the subroutine, where it is caught by the <code>sub s...</code> declaration. The payload, here a string, is handed back as the return value, and the <code>say</code> in the last line prints it to the screen.</p>

<p>Embedding the call <code>$block.()</code> in a <code>try { ... }</code> block or adding a <code>CONTROL { ... }</code> block to the body of the routine causes it to catch the exception.</p>

<p>Contrary to what other programming languages do, the <code>CATCH</code>/<code>CONTROL</code> blocks are within the scope in which the error is caught (not on the outside), giving it full access to the lexical variables, which makes it easier to generate useful error message, and also prevents DESTROY blocks from being run before the error is handled.</p>

<h4><a class='u'
name="Unthrown_exceptions"
>Unthrown exceptions</a></h4>

<p>Perl 6 embraces the idea of multi threading, and in particular automated parallelization. To make sure that not all threads suffer from the termination of a single thread, a kind of &#34;soft&#34; exception was invented.</p>

<p>When a function calls <code>fail($obj)</code>, it returns a special value of <code>undef</code>, which contains the payload <code>$obj</code> (usually an error message) and the back trace (file name and line number). Processing that special undefined value without check if it&#39;s undefined causes a normal exception to be thrown.</p>

<pre>    my @files = &#60;/etc/passwd /etc/shadow nonexisting&#62;;
    my @handles = hyper map { open($_) }, @files;</pre>

<p>In this example the <code>hyper</code> operator tells <code>map</code> to parallelize its actions as far as possible. When the opening of the <code>nonexisting</code> file fails, an ordinary <code>die &#34;No such file or directory&#34;</code> would also abort the execution of all other <code>open</code> operations. But since a failed open calls <code>fail(&#34;No such file or directory&#34;</code> instead, it gives the caller the possibility to check the contents of <code>@handles</code>, and it <i>still has access to the full error message</i>.</p>

<p>If you don&#39;t like soft exceptions, you say <code>use fatal;</code> at the start of the program and cause all exceptions from <code>fail()</code> to be thrown immediately.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>A good programming language needs exceptions to handle error conditions. Always checking return values for success is a plague and easily forgotten.</p>

<p>Since traditional exceptions can be poisonous for implicit parallelism, we needed a solution that combined the best of both worlds: not killing everything at once, and still not losing any information.</p>


<h2 id="post_27">Common Perl 6 data processing idioms</h2>
<p>Thu Jul 22 13:34:26 2010</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 27 - Common Perl 6 data processing idioms</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>  # create a hash from a list of keys and values:
  # solution 1: slices
  my %hash; %hash{@keys} = @values;
  # solution 2: meta operators
  my %hash = @keys Z=&#62; @values;

  # create a hash from an array, with
  # true value for each array item:
  my %exists = @keys Z=&#62; 1 xx *;

  # limit a value to a given range, here 0..10.
  my $x = -2;
  say 0 max $x min 10;

  # for debugging: dump the contents of a variable,
  # including its name, to STDERR
  note :$x.perl;

  # sort case-insensitively
  say @list.sort: *.lc;

  # mandatory attributes
  class Something {
      has $.required = die &#34;Attribute &#39;required&#39; is mandatory&#34;;
  }
  Something.new(required =&#62; 2); # no error
  Something.new()               # BOOM</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Learning the specification of a language is not enough to be productive with it. Rather you need to know how to solve specific problems. Common usage patterns, called <i>idioms</i>, helps you not having to re-invent the wheel every time you&#39;re faced with a problem.</p>

<p>So here a some common Perl 6 idioms, dealing with data structures.</p>

<h4><a class='u'
name="Hashes"
>Hashes</a></h4>

<pre>  # create a hash from a list of keys and values:
  # solution 1: slices
  my %hash; %hash{@keys} = @values;
  # solution 2: meta operators
  my %hash = @keys Z=&#62; @values;</pre>

<p>The first solution is the same you&#39;d use in Perl 5: assignment to a slice. The second solution uses the zip operator <code>Z</code>, which joins to list like a zip fastener: <code>1, 2, 3 Z 10, 20, 30</code> is <code>1, 10, 2, 20, 3, 30</code>. The <code>Z=&#62;</code> is a meta operator, which combines zip with <code>=&#62;</code> (the Pair construction operator). So <code>1, 2, 3 Z=&#62; 10, 20, 30</code> evaluates to <code>1 =&#62; 10, 2 =&#62; 20, 3 =&#62; 30</code>. Assignment to a hash variable turns that into a Hash.</p>

<p>For existence checks, the values in a hash often doesn&#39;t matter, as long as they all evaluate to <code>True</code> in boolean context. In that case, a nice way to initialize the hash from a given array or list of keys is</p>

<pre>  my %exists = @keys Z=&#62; 1 xx *;</pre>

<p>which uses a lazy, infinite list of 1s on the right-hand side, and relies on the fact that <code>Z</code> ends when the shorter list is exhausted.</p>

<h4><a class='u'
name="Numbers"
>Numbers</a></h4>

<p>Sometimes you want to get a number from somewhere, but clip it into a predefined range (for example so that it can act as an array index).</p>

<p>In Perl 5 you often end up with things like <code>$a = $b &#62; $upper ? $upper : $b</code>, and another conditional for the lower limit. With the <code>max</code> and <code>min</code> infix operators, that simplifies considerably to</p>

<pre>  my $in-range = $lower max $x min $upper;</pre>

<p>because <code>$lower max $x</code> returns the larger of the two numbers, and thus clipping to the lower end of the range.</p>

<p>Since <code>min</code> and <code>max</code> are infix operators, you can also clip infix:</p>

<pre> $x max= 0;
 $x min= 10;</pre>

<h4><a class='u'
name="Debugging"
>Debugging</a></h4>

<p>Perl 5 has Data::Dumper, Perl 6 objects have the <code>.perl</code> method. Both generate code that reproduces the original data structure as faithfully as possible.</p>

<p><code>:$var</code> generates a Pair (&#34;colonpair&#34;), using the variable name as key (but with sigil stripped). So it&#39;s the same as <code>var =&#62; $var</code>. <code>note()</code> writes to the standard error stream, appending a newline. So <code>note :$var.perl</code> is quick way of obtaining the value of a variable for debugging; purposes, along with its name.</p>

<h4><a class='u'
name="Sorting"
>Sorting</a></h4>

<p>Like in Perl 5, the <code>sort</code> built-in can take a function that compares two values, and then sorts according to that comparison. Unlike Perl 5, it&#39;s a bit smarter, and automatically does a transformation for you if the function takes only one argument.</p>

<p>In general, if you want to compare by a transformed value, in Perl 5 you can do:</p>

<pre>    # WARNING: Perl 5 code ahead
    my @sorted = sort { transform($a) cmp transform($b) } @values;

    # or the so-called Schwartzian Transform:
    my @sorted = map { $_-&#62;[1] }
                 sort { $a-&#62;[0] cmp $b-&#62;[0] }
                 map { [transform($_), $_] }
                 @values</pre>

<p>The former solution requires repetitive typing of the transformation, and executes it for each comparison. The second solution avoids that by storing the transformed value along with the original value, but it&#39;s quite a bit of code to write.</p>

<p>Perl 6 automates the second solution (and a bit more efficient than the naiive Schwartzian transform, by avoiding an array for each value) when the transformation function has arity one, ie accepts one argument only:</p>

<pre>    my @sorted = sort &#38;transform, @values;</pre>

<h4><a class='u'
name="Mandatory_Attributes"
>Mandatory Attributes</a></h4>

<p>The typical way to enforce the presence of an attribute is to check its presence in the constructor - or in all constructors, if there are many.</p>

<p>That works in Perl 6 too, but it&#39;s easier and safer to require the presence at the level of each attribute:</p>

<pre>    has $.attr = die &#34;&#39;attr&#39; is mandatory&#34;;</pre>

<p>This exploits the default value mechanism. When a value is supplied, the code for generating the default value is never executed, and the <code>die</code> never triggers. If any constructor fails to set it, an exception is thrown.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>N/A</p>


<h2 id="post_28">Currying</h2>
<p>Sun Jul 25 09:17:10 2010</p>

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 28 - Currying</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>  use v6;
  
  my &#38;f := &#38;substr.assuming(&#39;Hello, World&#39;);
  say f(0, 2);                # He
  say f(3, 2);                # lo
  say f(7);                   # World
  
  say &#60;a b c&#62;.map: * x 2;     # aabbcc
  say &#60;a b c&#62;.map: *.uc;      # ABC
  for ^10 {
      print &#60;R G B&#62;.[$_ % *]; # RGBRGBRGBR
  }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p><i>Currying</i> or <i>partial application</i> is the process of generating a function from another function or method by providing only some of the arguments. This is useful for saving typing, and when you want to pass a callback to another function.</p>

<p>Suppose you want a function that lets you extract substrings from <code>&#34;Hello, World&#34;</code> easily. The classical way of doing that is writing your own function:</p>

<pre>  sub f(*@a) {
      substr(&#39;Hello, World&#39;, |@a)
  }</pre>

<h4><a class='u'
name="Currying_with_assuming"
>Currying with <code>assuming</code></a></h4>

<p>Perl 6 provides a method <code>assuming</code> on code objects, which applies the arguments passed to it to the invocant, and returns the partially applied function.</p>

<pre>  my &#38;f := &#38;substr.assuming(&#39;Hello, World&#39;);</pre>

<p>Now <code>f(1, 2)</code> is the same as <code>substr(&#39;Hello, World&#39;, 1, 2)</code>.</p>

<p><code>assuming</code> also works on operators, because operators are just subroutines with weird names. To get a subroutine that adds 2 to whatever number gets passed to it, you could write</p>

<pre>  my &#38;add_two := &#38;infix:&#60;+&#62;.assuming(2);</pre>

<p>But that&#39;s tedious to write, so there&#39;s another option.</p>

<h4><a class='u'
name="Currying_with_the_Whatever-Star"
>Currying with the Whatever-Star</a></h4>

<pre>  my &#38;add_two := * + 2;
  say add_two(4);         # 6</pre>

<p>The asterisk, called <i>Whatever</i>, is a placeholder for an argument, so the whole expression returns a closure. Multiple Whatevers are allowed in a single expression, and create a closure that expects more arguments, by replacing each term <code>*</code> by a formal parameter. So <code>* * 5 + *</code> is equivalent to <code>-&#62; $a, $b { $a * 5 + $b }</code>.</p>

<pre>  my $c = * * 5 + *;
  say $c(10, 2);                # 52</pre>

<p>Note that the second <code>*</code> is an infix operator, not a term, so it is not subject to Whatever-currying.</p>

<p>The process of lifting an expression with Whatever stars into a closure is driven by syntax, and done at compile time. This means that</p>

<pre>  my $star = *;
  my $code = $star + 2</pre>

<p>does not construct a closure, but instead dies with a message like</p>

<pre>  Can&#39;t take numeric value for object of type Whatever</pre>

<p>Whatever currying is more versatile than <code>.assuming</code>, because it allows to curry something else than the first argument very easily:</p>

<pre>  say  ~(1, 3).map: &#39;hi&#39; x *    # hi hihihi</pre>

<p>This curries the second argument of the string repetition operator infix <code>x</code>, so it returns a closure that, when called with a numeric argument, produces the string <code>hi</code> as often as that argument specifies.</p>

<p>The invocant of a method call can also be Whatever star, so</p>

<pre>  say &#60;a b c&#62;.map: *.uc;      # ABC</pre>

<p>involves a closure that calls the <code>uc</code> method on its argument.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Perl 5 could be used for functional programming, which has been demonstrated in Mark Jason Dominus&#39; book <i>Higher Order Perl</i>.</p>

<p>Perl 6 strives to make it even easier, and thus provides tools to make typical constructs in functional programming easily available. Currying and easy construction of closures is a key to functional programming, and makes it very easy to write transformation for your data, for example together with <code>map</code> or <code>grep</code>.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S02.html#Built-In_Data_Types" class="podlinkurl"
>http://perlcabal.org/syn/S02.html#Built-In_Data_Types</a></p>

<p><a href="http://hop.perl.plover.com/" class="podlinkurl"
>http://hop.perl.plover.com/</a></p>

<p><a href="http://en.wikipedia.org/wiki/Currying" class="podlinkurl"
>http://en.wikipedia.org/wiki/Currying</a></p>



[% comment vim: set ft=html nomodifiable : %]

Perl 6 By Example: A Unicode Search Tool
<!-- 2017-03-05 -->
[% include p6-intro %]

<p>Every so often I have to identify or research some Unicode
characters. There's a tool called <a href="https://metacpan.org/pod/uni">uni</a> in the
Perl 5 distribution <a href="https://metacpan.org/release/App-Uni">App::Uni</a>.</p>

<p>Let's reimplement its basic functionality in a few lines of Perl 6 code and
use that as an occasion to talk about Unicode support in Perl 6.</p>

<p>If you give it one character on the command line, it prints out a description
of the character:</p>

<pre><code>$ uni üïê
üïê - U+1f550 - CLOCK FACE ONE OCLOCK
</code></pre>

<p>If you give it a longer string instead, it searches in the list of Unicode
character names and prints out the same information for each character whose
description matches the search string:</p>

<pre><code>$ uni third|head -n5
‚Öì - U+02153 - VULGAR FRACTION ONE THIRD
‚Öî - U+02154 - VULGAR FRACTION TWO THIRDS
‚Üâ - U+02189 - VULGAR FRACTION ZERO THIRDS
„Üõ - U+0319b - IDEOGRAPHIC ANNOTATION THIRD MARK
êÑ∫ - U+1013a - AEGEAN WEIGHT THIRD SUBUNIT
</code></pre>

<p>Each line corresponds to what Unicode calls a "code point", which is usually a
character on its own, but occasionally also something like a <code>U+00300 -
COMBINING GRAVE ACCENT</code>, which, combined with a <code>a - U+00061 - LATIN SMALL
LETTER A</code> makes the character <code>√†</code>.</p>

<p>Perl 6 offers a method <code>uniname</code> in both the classes <code>Str</code> and <code>Int</code> that
produces the Unicode code point name for a given character, either in its
direct character form, or in the form the code point number. With that, the
first part of <code>uni</code>'s desired functionality:</p>

<pre><code>#!/usr/bin/env perl6

use v6;

sub format-codepoint(Int $codepoint) {
    sprintf "%s - U+%05x - %s\n",
        $codepoint.chr,
        $codepoint,
        $codepoint.uniname;
}

multi sub MAIN(Str $x where .chars == 1) {
    print format-codepoint($x.ord);
}
</code></pre>

<p>Let's look at it in action:</p>

<pre><code>$ uni √∏
√∏ - U+000f8 - LATIN SMALL LETTER O WITH STROKE
</code></pre>

<p>The <code>chr</code> method turns a code point number into the character and <code>ord</code> is
the reverse, in other words: from character to code point number.</p>

<p>The second part, searching in all Unicode character names, works by
brute-force enumerating all possible characters and searching through their
<code>uniname</code>:</p>

<pre><code>multi sub MAIN($search is copy) {
    $search.=uc;
    for 1..0x10FFFF -&gt; $codepoint {
        if $codepoint.uniname.contains($search) {
            print format-codepoint($codepoint);
        }
    }
}
</code></pre>

<p>Since all character names are in upper case, the search term is first
converted to upper case with <code>$search.=uc</code>, which is short for <code>$search =
$search.uc</code>. By default, parameters are read only, which is why its
declaration here uses <code>is copy</code> to prevent that.</p>

<p>Instead of this rather imperative style, we can also formulate it in a more
functional style. We could think of it as a list of all characters, which we
whittle down to those characters that interest us, to finally format them
the way we want:</p>

<pre><code>multi sub MAIN($search is copy) {
    $search.=uc;
    print (1..0x10FFFF).grep(*.uniname.contains($search))
                       .map(&amp;format-codepoint)
                       .join;
}
</code></pre>

<p>To make it easier to identify (rather than search for) a string of more than
one character, an explicit option can help disambiguate:</p>

<pre><code>multi sub MAIN($x, Bool :$identify!) {
    print $x.ords.map(&amp;format-codepoint).join;
}
</code></pre>

<p><code>Str.ords</code> returns the list of code points that make up the string. With this
multi candidate of sub <code>MAIN</code> in place, we can do something like</p>

<pre><code>$ uni --identify √∏re
√∏ - U+000f8 - LATIN SMALL LETTER O WITH STROKE
r - U+00072 - LATIN SMALL LETTER R
e - U+00065 - LATIN SMALL LETTER E
</code></pre>

<h2>Code Points, Grapheme Clusters and Bytes</h2>

<p>As alluded to above, not all code points are fully-fledged characters on their
own. Or put another way, some things that we visually identify as a single
character are actually made up of several code points. Unicode calls these
sequences of one base character and potentially several combining characters as a
<em>grapheme cluster</em>.</p>

<p>Strings in Perl 6 are based on these grapheme clusters. If you get a list of
characters in string with <code>$str.comb</code>, or extract a substring with
<code>$str.substr(0, 4)</code>, match a regex against a string, determine the length, or
do any other operation on a string, the unit is always the grapheme cluster.
This best fits our intuitive understanding of what a character is and avoids
accidentally tearing apart a logical character through a <code>substr</code>, <code>comb</code> or
similar operation:</p>

<pre><code>my $s = "√∏\c[COMBINING TILDE]";
say $s;         # √∏ÃÉ
say $s.chars;   # 1
</code></pre>

<p>The <a href="https://docs.perl6.org/type/Uni">Uni</a> type is akin to a string and
represents a sequence of codepoints. It is useful in edge cases, but doesn't
support the same wealth of operations as
<a href="https://docs.perl6.org/type/Str">Str</a>. The typical way to go from <code>Str</code> to a
<code>Uni</code> value is to use one of the <code>NFC</code>, <code>NFD</code>, <code>NFKC</code>, or <code>NFKD</code> methods, which
yield a <code>Uni</code> value in the normalization form of the same name.</p>

<p>Below the <code>Uni</code> level you can also represent strings as bytes by choosing an
encoding. If you want to get from string to the byte level, call the
<a href="https://docs.perl6.org/type/Str#method_encode"><code>encode</code></a> method:</p>

<pre><code>my $bytes = 'Perl 6'.encode('UTF-8');
</code></pre>

<p>UTF-8 is the default encoding and also the one Perl 6 assumes when reading
source files. The result is something that does the
<a href="https://docs.perl6.org/type/Blob.html">Blob</a> role; you can access
individual bytes with positional indexing, such as <code>$bytes[0]</code>. The
<a href="https://docs.perl6.org/type/Blob.html#method_decode"><code>decode</code> method</a> helps
you to convert a <code>Blob</code> to a <code>Str</code>.</p>

<h2>Numbers</h2>

<p>Number literals in Perl 6 aren't limited to the Arabic digits we are so used
to in the English speaking part of the world. All Unicode code points that
have the <code>Decimal_Number</code> (short <code>Nd</code>) property are allowed, so you can for
example use Bengali digits:</p>

<pre><code>say ‡ß™‡ß®;             # 42
</code></pre>

<p>The same holds true for string to number conversions:</p>

<pre><code>say "‡ß™‡ß®".Int;       # 42
</code></pre>

<p>For other numeric code points you can use the <code>unival</code> method to obtain its
numeric value:</p>

<pre><code>say "\c[TIBETAN DIGIT HALF ZERO]".unival;
</code></pre>

<p>which produces the output <code>-0.5</code> and also illustrates how to use a codepoint
by name inside a string literal.</p>

<h2>Other Unicode Properties</h2>

<p>The <a href="https://docs.perl6.org/type/Str#(Cool)_method_uniprop"><code>uniprop</code> method</a>
in type <code>Str</code> returns the general category by default:</p>

<pre><code>say "√∏".uniprop;                            # Ll
say "\c[TIBETAN DIGIT HALF ZERO]".uniprop;  # No
</code></pre>

<p>The return value needs some Unicode knowledge in order to make sense of it,
or one could read
<a href="http://unicode.org/reports/tr44/#Properties">Unicode's Technical Report 44</a> for the gory details.
<code>Ll</code> stands for <code>Letter_Lowercase</code>, <code>No</code> is <code>Other_Number</code>. This is what
Unicode calls the <em>General Category</em>, but you can ask the <code>uniprop</code> (or
<code>uniprop-bool</code> method if you're only interested in a boolean result) for
other properties as well:</p>

<pre><code>say "a".uniprop-bool('ASCII_Hex_Digit');    # True
say "√º".uniprop-bool('Numeric_Type');       # False
say ".".uniprop("Word_Break");              # MidNumLet
</code></pre>

<h2>Collation</h2>

<p>Sorting strings starts to become complicated when you're not limited to ASCII
characters. Perl 6's <code>sort</code> method uses the <code>cmp</code> infix operator, which does a
pretty standard lexicographic comparison based on the codepoint number.</p>

<p>If you need to use a more
sophisticated collation algorithm, Rakudo 2017.02 and newer offer the
<a href="http://unicode.org/reports/tr10/">Unicode Collation Algorithm</a> as an
experimental feature:</p>

<pre><code>my @list = &lt;a √∂ √§ √Ñ o √∏&gt;;
say @list.sort;                     # (a o √Ñ √§ √∂ √∏)

use experimental :collation;
say @list.collate;                  # (a √§ √Ñ o √∂ √∏)
$*COLLATION.set(:tertiary(False));
say @list.collate;                  # (a √Ñ √§ o √∂ √∏)
</code></pre>

<p>The default <code>sort</code> considers any character with diacritics to be larger than
ASCII characters, because that's how they appear in the code point list. On
the other hand, <code>collate</code> knows that characters with diacritics belong
directly after their base character, which is not perfect in every language,
but internally a good compromise.</p>

<p>For Latin-based scripts, the primary sorting criteria is alphabetic, the
secondary diacritics, and the third is case.
<code>$*COLLATION.set(:tertiary(False))</code> thus makes <code>.collate</code> ignore case, so it
doesn't force lower case characters to come before upper case characters
anymore.</p>

<p>At the time of writing, language specification of collation is not yet
implemented.</p>

<h2>Summary</h2>

<p>Perl 6 takes languages other than English very seriously, and goes to great
lengths to facilitate working with them and the characters they use.</p>

<p>This includes basing strings on grapheme clusters rather than code points,
support for non-Arabic digits in numbers, and access to large parts of Unicode
database through built-in methods.</p>

[% include p6-mailing %]

[% option no-header %][% option no-footer %]
[% comment vim: set ft=html: %]

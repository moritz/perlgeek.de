Perl 6 Tidings from April 2009
<!-- 1238623200 -->
<h2>Specification</h2>

<p>Recently I wrote an article about Perl 6, claiming that the core of
the language is rather stable these days. Maybe I was wrong...</p>

<ul>
    <li>Daniel Ruoso continued some work on the Iterator API</li>
    <li>Result objects are now called "abstract objects" and are
        available via <code>$/.ast</code>. Larry also incorporated an
        older proposal to make the captures accessible in the order
        they appeared in the input text, which doesn't necessarily
        correlate with their order in which they appear in some
        capture lists/hashes. The method is called <a
        href="http://www.nntp.perl.org/group/perl.perl6.language/2009/03/msg31213.html">$/.caps</a>.
        There's also <code>$/.chunks</code> which returns not only
        captures, but also non-captured-but-matched strings interleaved with
        captures.
    </li>
    <li>Larry (de?)promoted junctions <a
        href="http://www.nntp.perl.org/group/perl.perl6.language/2009/03/msg31205.html">to be a native type</a>, and also made the eigenstates method (to
        access the values stored in the junction) private. This started
        many discussion on IRC and p6l about what are junctions good for,
        why don't they cook your lunch for free  and if they are
        really that hard to understand (no, they aren't; but they do
        require a bit of effort).<br />
        Independently, but also in a strive to make junctions more
        intuitive, block parameters now default to Object, so they are
        transparent to junctions. That means that <code> for @array
        -&gt; $x { ... }</code> won't autothread over $x if there are
        junctions stored in @array.
    </li>
    <li>Carl MÃ¤sak <a
        href="http://www.nntp.perl.org/group/perl.perl6.language/2009/03/msg31167.html">introduced a nice syntax</a> for doing smartmatching in multi subs/methods -
        but didn't quite achieve what he wanted. As a consequence
        Larry <a href="http://www.nntp.perl.org/group/perl.perl6.language/2009/03/msg31218.html">tweaked
        the specs for type narrowness in multi dispatch</a>, and
        scared the hell out of Jonathan Worthington who had
        implemented most of the old dispatch semantics in Rakudo
        already, and saw his design and works (as well as performance)
        turning into ping logic clouds. So Larry <a
        href="http://www.nntp.perl.org/group/perl.perl6.language/2009/03/msg31219.html">had</a>
        <a
        href="http://www.nntp.perl.org/group/perl.perl6.language/2009/03/msg31220.html">mercy</a>,
        and reverted the worst parts (or marked them as post-6.0 at
        least).</li>
        <li>The want() function seem to be fairly unimplementable, so
            I <a
            href="http://www.nntp.perl.org/group/perl.perl6.language/2009/03/msg31372.html">proposed
            to dispose of it</a>.
        </li>
</ul>

<h2>Implementations</h2>

<h3>Rakudo</h3>

<p>The <a href="http://use.perl.org/~pmichaud/journal/38673">March
release of Rakudo</a> brought many cool new features (like state
variables), and lifted the
long standing limitation that outer variables couldn't be accessed
within eval().</p>

<p>After the release Patrick also added <code>rx/.../</code> quoting
and (limited but substantial) support for Perl 5 regexes.</p>

<p>Vasily "bacek" Chekalkin contributed a socket implementation to
Parrot, which inspired some people to write HTTP clients in Rakudo
already. YaY.</p>

<p>Not so exciting but <em>very</em> useful for end users is the
proper importing and exporting of subs, implemented by Jonathan.</p>

<h3>SMOP</h3>

<p>The smop developers are currently working on a refactoring branch
for smop which includes better modularization and fewer problems for
bootstrapping due to reduce interdependencies. (Don't know if I
understood that correctly).</p>

<h2>Summer of Code</h2>

<p>Sorry, can't tell you all that much. Just that The Perl Foundation
received (among others) four Perl 6 or parrot related proposals 
(and the application is still open), all of which look very high
quality and promising to me.</p>

<p>In a month we'll all know more about them, and about which will be
funded.</p>

[% option no-header %] [% option no-footer %]
[% comment
    vim: ft=html spell spelllang=en_us tw=70 
%]

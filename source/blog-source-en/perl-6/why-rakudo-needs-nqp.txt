Why Rakudo needs NQP
<!-- 1314186235 -->

<p><a href="http://rakudo.org/">Rakudo</a>, a popular <a
href="http://perl6.org/">Perl 6</a> compiler, is built on top of a smaller
compiler called "NQP", short for <em>Not Quite Perl</em>.</p>

<p>Reading through a <a
    href="http://www.modernperlbooks.com/mt/2011/08/no-policy-can-save-wrong-code.html">recent
    ramble by chromatic</a>, I felt like he said "Rakudo needs NQP to be able
to ditch Parrot, once NQP runs on a different platform" (NQP is the "another
layer", which sits between Rakudo and Parrot, mentioned in the next-to-final
paragraph).</p>

<p>I'm sure chromatic knows that VM independence is the least important reason
for having NQP at all, but the casual reader might not, so let me explain the
real importance of NQP for Rakudo here.</p>

<p>The short version is just a single word: <a
    href="http://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29">bootstrapping</a>.</p>

<p>The longer version is that large parts of Rakudo are written in Perl 6
itself (or a subset thereof), and something is needed to break the
circularity.</p>

<p>In particular the base of the compiler is written in a subset of Perl 6,
and NQP compiles those parts to bytecode, which can then compile the rest of
the compiler.</p>

<p>This is not just because we have a fancy for Perl 6, and thus want to write
as much of the code in Perl 6, but there are solid technical reasons for
writing the compiler in Perl 6.</p>

<p>In Perl 6, the boundary between run time and compile time is blurred, as
well as the boundary between the compiler, the run time library and user-space
code. For example you alter the grammar with which your source code is parsed, by
injecting your own grammar rules.</p>

<p>"Your own grammar rules" above refers to user-space code, while the grammar
that is being altered is part of the compiler. If we had written the compiler
in something else than Perl 6 (for example Java), it would be horribly
difficult to inject user-space Perl 6 code into compiled code from a different
language.</p>

<p>And the code not only needs to be injected, but the data passed back
and forth between the compiler and the user space need to be Perl 6 objects, so all
important data structures in the compiler need to be Perl 6 based anyway.</p>

<p>And it's not just for grammar modifications: At its heart, Perl 6 is an
object oriented language. When the compiler sees a class definition, it
translates them to a series of method calls on the <a
href="http://en.wikipedia.org/wiki/Metaobject">metaobject</a>, which again
needs to be a Perl 6 object, otherwise it wouldn't be easily usable and
extensible from the user space.</p>

<p>Now you might think that grammar modifications and changes to the
Metaobject are pretty obscure features, and you could get along just fine
with an incomplete Perl 6 compiler that neglected those two areas. But even
then you'd have lots of interactions between run time and compile time. For
example consider a numeric literal like <code>42</code>. Obviously that needs
to be constructed of type <code>Int</code>. What's less obvious is that it
needs to be constructed to be of type Int at compile time already, because
Perl 6 code can run interleaved with the compilation. So the compiler needs to
be able to handle Perl 6 objects in all their generality, which is a huge pain
if the compiler is not written in Perl 6.</p>

<p>Rakudo has cheated on that front in the past, and has consequently
had lots of bugs and limitations due to non-Perl 6 objects leaking out at
unexpected ends. If you ever got a "Null PMC Access" from Rakudo, you know what I
mean.</p>

<p>The lesson we learned was that <strong>you need a Perl 6 compiler to
implement a Perl 6 compiler</strong>, even if that first Perl 6 compiler can
handle only a rather limited subset of Perl 6.</p>


<p>And there are also quite some benefits to this approach. For example <a
    href="http://pmthium.com/2011/07/14/new-regex-engine-for-nqp-and-nom-now-passing-7k-spectests/">NQP's new
    regex engine</a> is implemented as a role in NQP. It is mixed into an NQP
class which allows us to build Rakudo, but it is also mixed in a Perl 6 class,
which allows the generation of <a
href="http://perlcabal.org/syn/S05.html#Match_objects">Perl 6-level Match
objects</a> without any need to create NQP-level match objects first, and then
wrap them in Perl 6 Match objects.</p>

<p>That's what NQP does for us. It allows us to actually write a Perl 6
compiler.</p>

[% option no-header %][% option no-footer %]
[% comment vim: set ft=html : %]

Exceptions and control exceptions
<!-- 1247130002 -->

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 26 - Exceptions and control exceptions</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    try {
        die &#34;OH NOEZ&#34;;

        CATCH { 
            say &#34;there was an error: $!&#34;;
        }
    }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Exceptions are, contrary to their name, nothing exceptional. In fact they are part of the normal control flow of programs in Perl 6.</p>

<p>Exceptions are generated either by implicit errors (for example calling a non-existing method, or type check failures) or by explicitly calling <code>die</code> or other functions.</p>

<p>When an exception is thrown, the program searches for <code>CATCH</code> statements or <code>try</code> blocks in the caller frames, unwinding the stack all the way (that means it forcibly returns from all routines called so far). If no <code>CATCH</code> or <code>try</code> is found, the program terminates, and prints out a hopefully helpful error message. If one was found, the error message is stored in the special variable <code>$!</code>, and the <code>CATCH</code> block is executed (or in the case of a <code>try</code> without a CATCH block the try block returns <code>Any</code>).</p>

<p>So far exceptions might still sound exceptional, but error handling is integral part of each non-trivial application. But even more, normal <code>return</code> statements also throw exceptions!</p>

<p>They are called <i>control exceptions</i>, and can be caught with <code>CONTROL</code> blocks, or are implicitly caught at each routine declaration.</p>

<p>Consider this example:</p>

<pre>    use v6;

    sub s {
        my $block = -&#62; { return &#34;block&#34;; say &#34;still here&#34; };
        $block();
        return &#34;sub&#34;;
    }

    say s();    # block</pre>

<p>Here the <code>return &#34;block&#34;</code> throws a control exception, causing it to not only exit the current block (and thus not printing <code>still here</code> on the screen), but also exiting the subroutine, where it is caught by the <code>sub s...</code> declaration. The payload, here a string, is handed back as the return value, and the <code>say</code> in the last line prints it to the screen.</p>

<p>Adding a <code>CONTROL { ... }</code> block to the scope in which <code>$block</code> is called causes it to catch the control exception.</p>

<p>Contrary to what other programming languages do, the <code>CATCH</code>/<code>CONTROL</code> blocks are within the scope in which the error is caught (not on the outside), giving it full access to the lexical variables, which makes it easier to generate useful error message, and also prevents DESTROY blocks from being run before the error is handled.</p>

<h4><a class='u'
name="Unthrown_exceptions"
>Unthrown exceptions</a></h4>

<p>Perl 6 embraces the idea of multi threading, and in particular automated parallelization. To make sure that not all threads suffer from the termination of a single thread, a kind of &#34;soft&#34; exception was invented.</p>

<p>When a function calls <code>fail($obj)</code>, it returns a special value of <code>undef</code>, which contains the payload <code>$obj</code> (usually an error message) and the back trace (file name and line number). Processing that special undefined value without check if it&#39;s undefined causes a normal exception to be thrown.</p>

<pre>    my @files = &#60;/etc/passwd /etc/shadow nonexisting&#62;;
    my @handles = hyper map { open($_) }, @files; # hyper not yet implement</pre>

<p>In this example the <code>hyper</code> operator tells <code>map</code> to parallelize its actions as far as possible. When the opening of the <code>nonexisting</code> file fails, an ordinary <code>die &#34;No such file or directory&#34;</code> would also abort the execution of all other <code>open</code> operations. But since a failed open calls <code>fail(&#34;No such file or directory&#34;</code> instead, it gives the caller the possibility to check the contents of <code>@handles</code>, and it <i>still has access to the full error message</i>.</p>

<p>If you don&#39;t like soft exceptions, you say <code>use fatal;</code> at the start of the program and cause all exceptions from <code>fail()</code> to be thrown immediately.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>A good programming language needs exceptions to handle error conditions. Always checking return values for success is a plague and easily forgotten.</p>

<p>Since traditional exceptions can be poisonous for implicit parallelism, we needed a solution that combined the best of both worlds: not killing everything at once, and still not losing any information.</p>

[% option no-header %] [% option no-footer %]

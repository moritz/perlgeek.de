Subset Types
<!-- 1228604400 -->

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 21 - Subset Types</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    subset Squares of Int where { .sqrt.Int**2 == $_ };

    multi sub square_root(Squares $x --&#62; Int) {
        return $x.sqrt.Int;
    }
    multi sub square_root(Num $x --&#62; Num) {
        return $x.sqrt;
    }</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Java programmers tend to think of a type as either a class or an interface (which is something like a crippled class), but that view is too limited for Perl 6. A type is more generally a constraint of what a values a container can constraint. The &#34;classical&#34; constraint is <i>it is an object of a class <code>X</code> or of a class that inherits from <code>X</code></i>. Perl 6 also has constraints like <i>the class or the object does role <code>Y</code></i>, or <i>this piece of code returns true for our object</i>. The latter is the most general one, and is called a <i>subset</i> type:</p>

<pre>    subset Even of Int where { $_ % 2 == 0 }
    # Even can now be used like every other type name

    my Even $x = 2;
    my Even $y = 3; # type missmatch error</pre>

<p>(Try it out, Rakudo implements subset types already, but not yet mulit dispatch based on subset types).</p>

<p>You can also use anonymous subtypes in signatures:</p>

<pre>    sub foo (Int where { ... } $x) { ... }
    # or with the variable at the front:
    sub foo ($x of Int where { ... } ) { ... }</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Allowing arbitrary type constraints in the form of code allows ultimate extensibility: if you don&#39;t the current type system, you can just roll your own based on subset types.</p>

<p>It also makes libraries easier to extend: instead of dying on data that can&#39;t be handled, the subs and methods can simple declare their types in a way that &#34;bad&#34; data is rejected by the multi dispatcher. If somebody wants to handle data that the previous implementation rejected as &#34;bad&#34;, he can simple add a multi sub with the same name that accepts the data. For example a math library that handles real numbers could be enhanced this way to also handle complex numbers.</p>

[% option no-header %] [% option no-footer %]

Regexes (also called "rules")
<!-- 1222381200 -->

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 07 - Regexes (also called &#34;rules&#34;)</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    grammar URL {
        token TOP {
            &#60;schema&#62; &#39;://&#39; 
            [&#60;ip&#62; | &#60;hostname&#62; ]
            [ &#39;:&#39; &#60;port&#62;]?
            &#39;/&#39; &#60;path&#62;?
        }
        token byte {
            (\d**1..3) &#60;?{ $0 &#60; 256 }&#62;
        }
        token ip {
            &#60;byte&#62; [\. &#60;byte&#62; ] ** 3
        }
        token schema {
            \w+
        }
        token hostname {
            (\w+) ( \. \w+ )*
        }
        token port {
            \d+
        }
        token path {
            &#60;[ a..z A..Z 0..9 \-_.!~*&#39;():@&#38;=+$,/ ]&#62;+
        }
    }

    my $match = URL.parse(&#39;http://perl6.org/documentation/&#39;);
    say $match&#60;hostname&#62;;       # perl6.org</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Regexes are one of the areas that has been improved and revamped most in Perl 6. We don&#39;t call them <i>regular expressions</i> anymore because they are even less regular than they are in Perl 5.</p>

<p>There are three large changes and enhancements to the regexes</p>

<dl>
<dt><a name="Syntax_clean_up"
>Syntax clean up</a></dt>

<dd>
<p>Many small changes make rules easier to write. For example the dot <code>.</code> matches any character now, the old semantics (anything but newlines) can be achieved with <code>\N</code>.</p>

<p>Modifiers now go at the start of a regex, and non-capturing groups are <code>[...]</code>, which are a lot easier to read and write than the old <code>(?:...)</code>.</p>

<dt><a name="Nested_captures_and_match_object"
>Nested captures and match object</a></dt>

<dd>
<p>In Perl 5, a regex like this <code>(a(b))(c)</code> would put <code>ab</code> into <code>$1</code>, <code>b</code> into <code>$2</code> and <code>c</code> into <code>$3</code> upon successful match. This has changed. Now <code>$0</code> (enumeration starts at zero) contains <code>ab</code>, and <code>$0[0]</code> or <code>$/[0][0]</code> contains <code>b</code>. <code>$1</code> holds <code>c</code>. So each nesting level of parenthesis is reflected in a new nesting level in the result match object.</p>

<p>All the match variables are aliases into <code>$/</code>, which is the so-called <i>Match object</i>, and it actually contains a full match tree.</p>

<dt><a name="Named_regexes_and_grammars"
>Named regexes and grammars</a></dt>

<dd>
<p>You can declare regexes with names just like you can with subs and methods. You can refer to these inside other rules with <code>&#60;name&#62;</code>. And you can put multiple regexes into grammars, which are just like classes and support inheritance and composition</p>
</dd>
</dl>

<p>These changes make Perl 6 regexes and grammars much easier to write and maintain than Perl 5 regexes.</p>

<p>All of these changes go quite deep, and only the surface can be scratched here.</p>

<h4><a class='u'
name="Syntax_clean_up"
>Syntax clean up</a></h4>

<p>Letter characters (ie underscore, digits and all Unicode letters) match literally, and have a special meaning (they are <i>metasyntactic</i>) when escaped with a backslash. For all other characters it&#39;s the other way round - they are metasyntactic unless escaped.</p>

<pre>    literal         metasyntactic
    a  b  1  2      \a \b \1 \2
    \* \: \. \?     *  :  .  ? </pre>

<p>Not all metasyntactic tokens have a meaning (yet). It is illegal to use those without a defined meaning.</p>

<p>There is another way to escape strings in regexes: with quotes.</p>

<pre>    m/&#39;a literal text: $#@!!&#39;/</pre>

<p>The change in semantics of <code>.</code> has already been mentioned, and also that <code>[...]</code> now construct non-capturing groups. Character classes are <code>&#60;[...]&#62;</code>, and negated char classes <code>&#60;-[...]&#62;</code>. <code>^</code> and <code>$</code> always match begin and end of the string respectively, to match begin and end of lines use <code>^^</code> and <code>$$</code>.</p>

<p>This means that the <code>/s</code> and <code>/m</code> modifiers are gone. Modifiers are now given at the start of a regex, and are given in this notation:</p>

<pre>    if &#34;abc&#34; ~~ m:i/B/ {
        say &#34;Matched a B.&#34;;
    }</pre>

<p>... which happens to be the same as the <i>colon pair</i> notation that you can use for passing named arguments to routines.</p>

<p>Modifiers have a short and a long form. The old <code>/x</code> modifier is now the default, i.e. white spaces are ignored.</p>

<pre>    short   long            meaning
    -------------------------------
    :i      :ignorecase     ignore case (formerly /i)
    :m      :ignoremark     ignore marks (accents, diaeresis etc.)
    :g      :global         match as often as possible (/g)
    :s      :sigspace       Every white space in the regex matches
                            (optional) white space
    :P5     :Perl5          Fall back to Perl 5 compatible regex syntax
    :4x     :x(4)           Match four times (works for other numbers as well)
    :3rd    :nth(3)         Third match
    :ov     :overlap        Like :g, but also consider overlapping matches
    :ex     :exhaustive     Match in all possible ways
            :ratchet        Don&#39;t backtrack</pre>

<p>The <code>:sigspace</code> needs a bit more explanation. It replaces all whitespace in the pattern with <code>&#60;.ws&#62;</code> (that is it calls the rule <code>ws</code> without keeping its result). You can override that rule. By default it matches one or more whitespaces if it&#39;s enclosed in word characters, and zero or more otherwise.</p>

<p>(There are more new modifiers, but probably not as important as the listed ones).</p>

<h4><a class='u'
name="The_Match_Object"
>The Match Object</a></h4>

<p>Every match generates a so-called match object, which is stored in the special variable <code>$/</code>. It is a versatile thing. In boolean context it returns <code>Bool::True</code> if the match succeeded. In string context it returns the matched string, when used as a list it contains the positional captures, and when used as a hash it contains the named captures. The <code>.from</code> and <code>.to</code> methods contain the first and last string position of the match respectively.</p>

<pre>    if &#39;abcdefg&#39; ~~ m/(.(.)) (e | bla ) $&#60;foo&#62; = (.) / {
        say $/[0][0];           # d
        say $/[0];              # cd
        say $/[1];              # e
        say $/&#60;foo&#62;             # f
    }</pre>

<p><code>$0</code>, <code>$1</code> etc are just aliases for <code>$/[0]</code>, <code>$/[1]</code> etc. Likewise <code>$/&#60;x&#62;</code> and <code>$/{&#39;x&#39;}</code> are aliased to <code>$&#60;x&#62;</code>.</p>

<p>Note that anything you access via <code>$/[...]</code> and <code>$/{...}</code> is a match object (or a list of Match objects) again. This allows you to build real parse trees with rules.</p>

<h4><a class='u'
name="Named_Regexes_and_Grammars"
>Named Regexes and Grammars</a></h4>

<p>Regexes can either be used with the old style <code>m/.../</code>, or be declared like subs and methods.</p>

<pre>    regex a { ... }
    token b { ... }
    rule  c { ... }</pre>

<p>The difference is that <code>token</code> implies the <code>:ratchet</code> modifier (which means no backtracking, like a <code>(?&#62; ... )</code> group around each part of the regex in perl 5), and <code>rule</code> implies both <code>:ratchet</code> and <code>:sigspace</code>.</p>

<p>To call such a rule (we&#39;ll call them all rules, independently with which keyword they were declared) you put the name in angle brackets: <code>&#60;a&#62;</code>. This implicitly anchors the sub rule to its current position in the string, and stores the result in the match object in <code>$/&#60;a&#62;</code>, ie it&#39;s a named capture. You can also call a rule without capturing its result by prefixing its name with a dot: <code>&#60;.a&#62;</code>.</p>

<p>If you want to refer to a rule outside of a Grammar, you need to call them with a routine sigil, like <code>&#60;&#38;other&#62;</code>.</p>

<p>A grammar is a group of rules, just like a class (see the SYNOPSIS for an example). Grammars can inherit, override rules and so on.</p>

<pre>    grammar URL::HTTP is URL {
        token schema { &#39;http&#39; }
    }</pre>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Perl 5 regexes are often rather unreadable, the grammars encourage you to split a large regex into more readable, short fragments. Named captures make the rules more self-documenting, and many things are now much more consistent than they were before.</p>

<p>Finally grammars are so powerful that you can parse about every programming language with them, including Perl 6 itself. That makes the Perl 6 grammar easier to maintain and to change than the Perl 5 one, which is written in C and not changeable at parse time.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://design.perl6.org/S05.html" class="podlinkurl"
>http://design.perl6.org/S05.html</a></p>

<p><a href="http://perlgeek.de/en/article/mutable-grammar-for-perl-6" class="podlinkurl"
>http://perlgeek.de/en/article/mutable-grammar-for-perl-6</a></p>

<p><a href="http://perlgeek.de/en/article/longest-token-matching" class="podlinkurl"
>http://perlgeek.de/en/article/longest-token-matching</a></p>

[% option no-header %] [% option no-footer %]

Quoting and Parsing


<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 23 - Quoting and Parsing</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    my @animals = &#60;dog cat tiger&#62;
    # or
    my @animals = qw/dog cat tiger/;
    # or 
    
    my $interface = q{eth0};
    my $ips = q :s :x /ifconfig $interface/;

    # -----------

    sub if {
        warn &#34;if() calls a sub\n&#34;;
    }
    if();</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="Quoting"
>Quoting</a></h4>

<p>Perl 6 has a powerful mechanism of quoting strings, you have exact control over what features you want in your string.</p>

<p>Perl 5 had single quotes, double quotes and <code>qw(...)</code> (single quotes, splitted on whitespaces) as well as the <code>q(..)</code> and <code>qq(...)</code> forms which are basically synomyms for single and double quotes.</p>

<p>Perl 6 in turn defines a quote operator named <code>Q</code> that can take various modifiers. The <code>:b</code> (<i>backslash</i>) modifier allows interpolation of backslash escape sequences like <code>\n</code>, the <code>:s</code> modifier allows interpolation of scalar variables, <code>:c</code> allows the interpolation of closures (<code>&#34;1 + 2 = { 1 + 2 }&#34;</code>) and so on, <code>:w</code> splits on words as <code>qw/.../</code> does.</p>

<p>You can arbitrarily combine those modifiers. For example you might wish a form of <code>qw/../</code> that interplates only scalars, but nothing else? No problem:</p>

<pre>    my $stuff = &#34;honey&#34;;
    my @list = Q :w :s/milk toast $stuff with\tfunny\nescapes/;
    say @list[*-1];                     # prints with\nfunny\nescapes</pre>

<p>Here&#39;s a list of what modifiers are available, mostly stolen from S02 directly. All of these also have long names, which I ommited here.</p>

<pre>    Features:
        :q          Interpolate \\, \q and \&#39;
        :b          Other backslash escape sequences like \n, \t
    Operations:
        :x          Execute as shell command, return result
        :w          Split on whitespaces
        :ww         Split on whitespaces, with quote proection
    Variable interpolation
        :s          Interpolate scalars   ($stuff)
        :a          Interpolate arrays    (@stuff[])
        :h          Interpolate hashes    (%stuff{})
        :f          Interpolate functions (&#38;stuff())
    Other
        :c          Interpolate closures  ({code})
        :qq         Interpolate with :s, :a, :h, :f, :c, :b
        :regex      parse as regex</pre>

<p>There are some short forms which make life easier for you:</p>

<pre>    q       Q:q
    qq      Q:qq
    m       Q:regex</pre>

<p>You can also omit the first colon <code>:</code> if the quoting symbol is a short form, and write it as a singe word:</p>

<pre>    symbol      short for
    qw          q:w
    Qw          Q:w
    qx          q:x
    Qc          Q:c
    # and so on.</pre>

<p>However there is one form that does not work, and some Perl 5 programmers will miss it: you can&#39;t write <code>qw(...)</code> with the round parenthesis in Perl 6. It is interpreted as a call to sub <code>qw</code>.</p>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="Parsing"
>Parsing</a></h4>

<p>This is where parsing comes into play: Every construct of the form <code>identifier(...)</code> is parsed as sub call. Yes, every.</p>

<pre>    if($x&#60;3)</pre>

<p>is parsed as a call to sub <code>if</code>. You can disambiguate with whitespaces:</p>

<pre>    if ($x &#60; 3) { say &#39;&#60;3&#39; }</pre>

<p>Or just omit the parens alltogether:</p>

<pre>    if $x &#60; 3 { say &#39;&#60;3&#39; }</pre>

<p>This implies that Perl 6 has no keywords. Actually there are keywords like <code>use</code> or <code>if</code>, but they are only special if used in a special syntax.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Various combinations of the quoting modifiers are already used internally, for example <code>q:w</code> to parse <code>&#60;...&#62;</code>, and <code>:regex</code> for <code>m/.../</code>. It makes sense to expose these also to the user, who gains flexibility, and can very easily write macros that provide a shortcut for the exact quoting semantics he wants.</p>

<p>And when you limit the speciality of keywords, you have far less troubles with backwards compatibility if you want to change what you consider a &#34;keyword&#34;.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S02.html#Literals" class="podlinkurl"
>http://perlcabal.org/syn/S02.html#Literals</a></p>

[% option no-header %] [% option no-footer %]

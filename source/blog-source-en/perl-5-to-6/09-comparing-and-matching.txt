Comparing and Matching
<!-- 1222554000 -->

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 09 - Comparing and Matching</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    &#34;ab&#34;    eq      &#34;ab&#34;    True
    &#34;1.0&#34;   eq      &#34;1&#34;     False
    &#34;a&#34;     ==      &#34;b&#34;     True
    &#34;1&#34;     ==      1.0     True
    1       ===     1       True
    [1, 2]  ===     [1, 2]  False
    $x = [1, 2];
    $x      ===     $x      True
    $x      eqv     $x      True
    [1, 2]  eqv     [1, 2]  True
    1.0     eqv     1       False

    &#39;abc&#39;   ~~      m/a/    True
    &#39;abc&#39;   ~~      Str     True
    &#39;abc&#39;   ~~      Int     False
    Str     ~~      Any     True
    Str     ~~      Num     False
    1       ~~      0..4    True
    -3      ~~      0..4    False</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl 6 still has string comparison operators (<code>eq</code>, <code>lt</code>, <code>gt</code>, <code>le</code>, <code>ge</code>, <code>ne</code>; <code>cmp</code> is now called <code>leg</code>) that evaluate their operands in string context. Similarly all the numeric operators from Perl 5 are still there.</p>

<p>Since objects are more than blessed references, a new way for comparing them is needed. <code>===</code> returns only true for identical values. For immutable types like numbers or Strings that is a normal equality tests, for other objects it only returns <code>True</code> if both variables refer to the same object (like comparing memory addresses in C++).</p>

<p><code>eqv</code> tests if two things are equivalent, ie if they are of the same type and have the same value. Two identically constructed data structures are equivalent.</p>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="Smart_matching"
>Smart matching</a></h4>

<p>Perl 6 has a &#34;compare everything&#34; operator, called &#34;smart match&#34; operator, and spelled <code>~~</code>.</p>

<p>For immutable types it is a simple equality comparison. A smart match against a type checks for type conformance. A smart match against a regex matches the regex. Matching a scalar against a <code>Range</code> object checks if that scalar is included in the range.</p>

<p>There are other, more advanced forms of matching: for example you can check if an argument list (<code>Capture</code>) fits to the parameter list (<code>Signature</code>) of a subroutine, or apply file test operators (like <code>-e</code> in Perl 5).</p>

<p>What you should remember is that any &#34;does $x fit to $y?&#34;-Question will be formulated as a smart match in Perl 6.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S03.html#Nonchaining_binary_precedence" class="podlinkurl"
>http://perlcabal.org/syn/S03.html#Nonchaining_binary_precedence</a> =for time 1222554000 =for editor vim: spell</p>

[% option no-header %] [% option no-footer %]

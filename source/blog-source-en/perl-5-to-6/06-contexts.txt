Contexts
<!-- 1222294800 -->

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 06 - Contexts</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    my @a = &#60;a b c&#62;;
    my $x = @a;
    say $x[2];          # c
    say (~2).WHAT;      # (Str)
    say +@a;            # 3
    if @a &#60; 10 { say &#34;short array&#34;; }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>When you write something like this</p>

<pre>    $x = @a</pre>

<p>in Perl 5, <code>$x</code> contains less information than <code>@a</code> - it contains only the number of items in <code>@a</code>. To preserve all information, you have to explicitly take a reference: <code>$x = \@a</code>.</p>

<p>In Perl 6 it&#39;s the other way round: by default you don&#39;t lose anything, the scalar just stores the array. This was made possible by introducing a generic item context (called <i>scalar</i> in Perl 5) and more specialized numeric, integer and string contexts. Void and List context remain unchanged.</p>

<p>You can force contexts with special syntax.</p>

<pre>    syntax       context

    ~stuff       String
    ?stuff       Bool (logical)
    +stuff       Numeric
    -stuff       Numeric (also negates)
    $( stuff )   Generic item context
    @( stuff )   List context
    %( stuff )   Hash context
     stuff.tree  Tree context</pre>

<h4><a class='u'
name="Tree_Context"
>Tree Context</a></h4>

<p>In the early days of Perl 6, there were lots of builtins of which two versions existed, one that returned a flat list, one that returned a list of arrays.</p>

<p>Now this is solved by returning a list of <code>Parcel</code> objects, where the <code>Parcel</code> objects might or might not flatten out depending on the context.</p>

<p>Consider the infix <code>Z</code> (short for <i>zip</i>) operator, which interleaves the elements from two lists:</p>

<pre>    my @a = &#60;a b c&#62; Z &#60;1 2 3&#62;;
    say @a.join;                # a1b2c3</pre>

<p>What happened here is that the right-hand side of the first statement returned <code>(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)</code>, and assignment to an array, which provides list context, flattened out the inner parcels. On the other hand if you write</p>

<pre>    my @t = (&#60;a b c&#62; Z &#60;1 2 3&#62;).tree;</pre>

<p>then <code>@t</code> now contains three elements, each of which are arrays that don&#39;t flatten out.</p>

<pre>    for @t -&#62; @inner {
        say &#34;first: @inner[0]  second: @inner[1]&#34;
    }</pre>

<p>Produces the output</p>

<pre>    first: a  second: 1
    first: b  second: 2
    first: c  second: 3</pre>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>More specific contexts are a way to delay design choices. For example it seems premature to decide what a list should return in scalar context - a reference to the list would preserve all information, but isn&#39;t very useful in numeric comparisons. On the other hand a string representation might be most useful for debugging purposes. So every possible choice disappoints somebody.</p>

<p>With more specific context you don&#39;t need to make this choice - it returns some sensible default, and all operators that don&#39;t like this choice can simply evaluate the object a more specific context.</p>

<p>For some things (like the Match object), the different contexts really enhance their usefulness and beauty.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S02.html#Context" class="podlinkurl"
>http://perlcabal.org/syn/S02.html#Context</a> <a href="http://perlgeek.de/blog-en/perl-6/immutable-sigils-and-context.html" class="podlinkurl"
>http://perlgeek.de/blog-en/perl-6/immutable-sigils-and-context.html</a></p>

[% option no-header %] [% option no-footer %]

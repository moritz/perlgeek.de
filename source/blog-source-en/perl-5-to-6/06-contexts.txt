Contexts
<!-- 1222294800 -->

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 06 - Contexts</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    my @a = &#60;a b c&#62;
    my $x = @a;
    say $x[2];          # c
    say (~2).WHAT       # Str()
    say +@a;            # 3
    if @a &#60; 10 { say &#34;short array&#34;; }</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>When you write something like this</p>

<pre>    $x = @a</pre>

<p>in Perl 5, <code>$x</code> contains less information than <code>@a</code> - it contains only the number of items in <code>@a</code>. To preserve all information, you have to explicitly take a reference: <code>$x = \@a</code>.</p>

<p>In Perl 6 it&#39;s the other way round: by default you don&#39;t lose anything, the scalar just stores the array. This was made possible by introducing a generic item context (called <i>scalar</i> in Perl 5) and more specialized numeric, integer and string contexts. Void and List context remain unchanged.</p>

<p>You can force contexts with special syntax.</p>

<pre>    syntax       context

    ~stuff       String
    ?stuff       Bool
    +stuff       Numeric
    -stuff       Numeric (also negates)
    $( stuff )   Generic item context
    @( stuff )   List Context
    @@( stuff )  Slice context</pre>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="Slice_Context"
>Slice Context</a></h4>

<p>There&#39;s also a new context called <i>slice context</i>. It is a list context in which sublists don&#39;t interpolate.</p>

<pre>     @( &#60;a b&#62; Z &#60;c d&#62; )     # &#60;a c b d&#62;
    @@( &#60;a b&#62; Z &#60;c d&#62; )     # ([&#39;a&#39;, &#39;c&#39;], [&#39;b&#39;, &#39;d&#39;])</pre>

<p>This was introduced after the observation that many built in list functions had two versions - one that returned a flat list, and one that returned a list of lists.</p>

<p>You can force slice context with <code>@@( stuff )</code>.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>More specific contexts are a way to delay design choices. For example it seems premature to decide what a list should return in scalar context - a reference to the list would preserve all information, but isn&#39;t very useful in numeric comparisons. So every possible choice disappoints somebody.</p>

<p>With more specific context you don&#39;t need to make this choice - it returns some sensible default, and all operators that don&#39;t like this choice can simply propagate a more specific context.</p>

<p>For some things like the match object the different contexts really enhance their usefulness and beauty.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S02.html#Context" class="podlinkurl"
>http://perlcabal.org/syn/S02.html#Context</a></p>

[% option no-header %] [% option no-footer %]

Junctions
<!-- 1222467600 -->

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 07 - Junctions</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    if $x == 3|4 {
        say &#39;$x is either 3 or 4&#39;
    }
    say ((2|3|4)+7).perl        # (9|10|11)</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Junctions are superpositions of unordered values. Operations on junctions are executed for each item of the junction separately (and maybe even in parallel), and the results are assembled in a junction of the same type.</p>

<p>The junction types only differ when evaluated in boolean context. The types are <code>any</code>, <code>all</code>, <code>one</code> and <code>none</code>.</p>

<pre>    Type    Infix operator
    any     |
    one     ^
    all     &#38;</pre>

<p><code>1 | 2 | 3</code> is the same as <code>any(1..3)</code>.</p>

<pre>    my Junction $weekday = any &#60;Monday Tuesday Wednesday 
                                Thursday Friday Saturday Sunday&#62;
    if $day eq $weekday {
        say &#34;See you on $day&#34;;
    }</pre>

<p>In this example the <code>eq</code> operator is called with each pair <code>$day, &#39;Monday&#39;</code>, <code>$day, &#39;Tuesday&#39;</code> etc. and the result is put into an <code>any</code>-junction again. As soon as the result is determined (in this case, as soon as one comparison returns <code>True</code>) it can abort the execution of the other comparisons.</p>

<p>This works not only for operators, but also for routines:</p>

<pre>    if 2 == sqrt(4 | 9 | 16) {
        say &#34;YaY&#34;;
    }</pre>

<p>To make this possible, junctions stand outside the normal type hierarchy (a bit):</p>

<pre>                      Mu
                    /    \
                   /      \
                 Any     Junction
               /  |  \
            All other types</pre>

<p>If you want to write a sub that takes a junction and doesn&#39;t autothread over it, you have to declare the type of the parameter either as <code>Mu</code> or <code>Junction</code></p>

<pre>    sub dump_yaml(Junction $stuff) {
        # we hope that YAML can represent junctions ;-)
        ....
    }</pre>

<p>A word of warning: junctions can behave counter-intuitive sometimes. With non-junction types <code>$a != $b</code> and <code>!($a == $b)</code> always mean the same thing. If one of these variables is a junction, that might be different:</p>

<pre>    my Junction $b = 3 | 2;
    my $a = 2; 
    say &#34;Yes&#34; if   $a != $b ;       # Yes
    say &#34;Yes&#34; if !($a == $b);       # no output</pre>

<p><code>2 != 3</code> is true, thus <code>$a != 2|3</code> is also true. On the other hand the <code>$a == $b</code> comparison returns a single Bool value (<code>True</code>), and the negation of that is <code>False</code>.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Perl aims to be rather close to natural languages, and in natural language you often say things like &#34;if the result is $this or $that&#34; instead of saying &#34;if the result is $this or the result is $that&#34;. Most programming languages only allow (a translation of) the latter, which feels a bit clumsy. With junctions Perl 6 allows the former as well.</p>

<p>It also allows you to write many comparisons very easily that otherwise require loops.</p>

<p>As an example, imagine an array of numbers, and you want to know if all of them are non-negative. In Perl 5 you&#39;d write something like this:</p>

<pre>    # Perl 5 code:
    my @items = get_data();
    my $all_non_neg = 1;
    for (@items){
        if ($_ &#60; 0) {
            $all_non_neg = 0;
            last;
        }
    }
    if ($all_non_neg) { ... }</pre>

<p>Or if you happen to know about <code>List::MoreUtils</code></p>

<pre>    use List::MoreUtils qw(all);
    my @items = get_data;
    if (all { $_ &#62;= 0 } @items) { ...  }</pre>

<p>In Perl 6 that is short and sweet:</p>

<pre>    my @items = get_data();
    if all(@items) &#62;= 0 { ... }</pre>

<h3><a class='u'
name="A_Word_of_Warning"
>A Word of Warning</a></h3>

<p>Many people get all excited about junctions, and try to do too much with them.</p>

<p>Junctions are not sets; if you try to extract items from a junction, you are doing it wrong, and should be using a <code>Set</code> instead.</p>

<p>It is a good idea to use junctions as smart conditions, but trying to build a solver for equations based on the junction autothreading rules is on over-extortion and usually results in frustration.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S03.html#Junctive_operators" class="podlinkurl"
>http://perlcabal.org/syn/S03.html#Junctive_operators</a></p>

[% option no-header %] [% option no-footer %]

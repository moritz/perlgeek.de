Twigils
<!-- 1224540000 -->

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 15 - Twigils</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>  class Foo {
      has $.bar;
      has $!baz;
  }

  my @stuff = sort { $^b[1] &#60;=&#62; $^a[1]}, [1, 2], [0, 3], [4, 8];
  my $block = { say &#34;This is the named &#39;foo&#39; parameter: $:foo&#34; };
  $block(:foo&#60;bar&#62;);

  say &#34;This is file $?FILE on line $?LINE&#34;

  say &#34;A CGI script&#34; if %*ENV.exists(&#39;DOCUMENT_ROOT&#39;);</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Some variables have a second sigil, called <i>twigil</i>. It basically means that the variable isn&#39;t &#34;normal&#34;, but differs in some way, for example it could be differently scoped.</p>

<p>You&#39;ve already seen that public and private object attributes have the <code>.</code> and <code>!</code> twigil respectively; they are not normal variables, they are tied to <code>self</code>.</p>

<p>The <code>^</code> twigil removes a special case from perl 5. To be able to write</p>

<pre>  # beware: perl 5 code
  sort { $a &#60;=&#62; $b } @array</pre>

<p>the variables <code>$a</code> and <code>$b</code> are special cased by the <code>strict</code> pragma. In Perl 6, there&#39;s a concept named <i>self-declared positional parameter</i>, and these parameters have the <code>^</code> twigil. It means that they are positional parameters of the current block, without being listed in a signature. The variables are filled in lexicographic (alphabetic) order:</p>

<pre>  my $block = { say &#34;$^c $^a $^b&#34; };
  $block(1, 2, 3);                # 3 1 2</pre>

<p>So now you can write</p>

<pre>  @list = sort { $^b &#60;=&#62; $^a }, @list;
  # or:
  @list = sort { $^foo &#60;=&#62; $^bar }, @list;</pre>

<p>Without any special cases.</p>

<p>And to keep the symmetry between positional and named arguments, the <code>:</code> twigil does the same for named parameters, so these lines are roughly equivalent:</p>

<pre>  my $block = { say $:stuff }
  my $sub   = sub (:$stuff) { say $stuff }</pre>

<p>The <code>?</code> twigil stands for variables and constants that are known at compile time, like <code>$?LINE</code> for the current line number (formerly <code>__LINE__</code>), and <code>$?DATA</code> is the file handle to the <code>DATA</code> section.</p>

<p>Contextual variables can be accessed with the <code>*</code> twigil, so <code>$*IN</code> and <code>$*OUT</code> can be overridden dynamically.</p>

<p>A pseudo twigil is <code>&#60;</code>, which is used in a construct like <code>$&#60;capture&#62;</code>, where it is a shorthand for <code>$/&#60;capture&#62;</code>, which accesses the Match object after a regex match.</p>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>When you read Perl 5&#39;s <code>perlvar</code> document, you can see that it has far too many variables, most of them global, that affect your program in various ways.</p>

<p>The twigils try to bring some order in these special variables, and at the other hand they remove the need for special cases. In the case of object attributes they shorten <code>self.var</code> to <code>$.var</code> (or <code>@.var</code> or whatever).</p>

<p>So all in all the increased &#34;punctuation noise&#34; actually makes the programs much more consistent and readable.</p>

[% option no-header %] [% option no-footer %]

Laziness
<!-- 1224280800 -->

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 12 - Laziness</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    my @integers = 0..*;
    for @integers -&#62; $i {
        say $i;
        last if $i % 17 == 0;
    }

    my @even := map { 2 * $_ }, 0..*;
    my @stuff := gather {
        for 0 .. Inf {
            take 2 ** $_;
        }
    }</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl programmers tend to be lazy. And so are their lists.</p>

<p>In this case <i>lazy</i> means, that the evaluation is delayed as much as possible. When you write something like <code>@a := map BLOCK, @b</code>, the block isn&#39;t executed at all. Only when you start to access items from <code>@a</code> the <code>map</code> actually executes the block and fills <code>@a</code> as much as needed.</p>

<p>Note the use of binding instead of assignment: Assigning to an array might force eager evaluation (unless the compiler knows the list is going to be infinite; the exact details of figuring this out are still subject to change), binding never does.</p>

<p>Laziness allows you to deal with infinite lists: as long as you don&#39;t do anything to all of its arguments, they take up only as much space as the items need that have already been evaluated.</p>

<p>There are pitfalls, though: determining the length of a list or sorting it kills laziness - if the list is infinite, it will likely loop infinitely, or fail early if the infiniteness can be detected.</p>

<p>In general conversions to a scalar (like <code>List.join</code>) are <i>eager</i>, i.e. non-lazy.</p>

<p>Laziness prevents unnecessary computations, and can therefore boost performance while keeping code simple. Keep in mind that there is some overhead to switching between the producing and consuming code paths.</p>

<p>When you read a file line by line in Perl 5, you don&#39;t use <code>for (&#60;HANDLE&#62;)</code> because it reads all the file into memory, and only then starts iterating. With laziness that&#39;s not an issue:</p>

<pre>    my $file = open &#39;/etc/passwd&#39;;
    for $file.lines -&#62; $line {
        say $line;
    }</pre>

<p>Since <code>$file.lines</code> is a lazy list, the lines are only physically read from disk as needed (besides buffering, of course).</p>

<h4><a class='u'
name="gather/take"
>gather/take</a></h4>

<p>A very useful construct for creating lazy lists is <code>gather { take }</code>. It is used like this:</p>

<pre>    my @list := gather {
        while True {
            # some computations;
            take $result;
        }
    }</pre>

<p><code>gather BLOCK</code> returns a lazy list. When items from <code>@list</code> are needed, the <code>BLOCK</code> is run until <code>take</code> is executed. <code>take</code> is just like return, and all <code>take</code>n items are used to construct <code>@list</code>. When more items from <code>@list</code> are needed, the execution of the block is resumed after <code>take</code>.</p>

<p><code>gather/take</code> is dynamically scoped, so it is possible to call <code>take</code> outside of the lexical scope of the <code>gather</code> block:</p>

<pre>    my @list = gather {
        for 1..10 {
            do_some_computation($_);
        }
    }

    sub do_some_computation($x) {
        take $x * ($x + 1);
    }</pre>

<p>Note that <code>gather</code> can act on a single statement instead of a block too:</p>

<pre>    my @list = gather for 1..10 {
        do_some_computation($_);
    }</pre>

<h4><a class='u'
name="Controlling_Laziness"
>Controlling Laziness</a></h4>

<p>Laziness has its problems (and when you try to learn Haskell you&#39;ll notice how weird their IO system is because Haskell is both lazy and free of side effects), and sometimes you don&#39;t want stuff to be lazy. In this case you can just prefix it with <code>eager</code>.</p>

<pre>    my @list = eager map { $block_with_side_effects }, @list;</pre>

<p>On the other hand only lists are lazy by default. But you can also make lazy scalars (though none of our compilers implement that feature yet):</p>

<pre>    my $ls = lazy { $expansive_computation };</pre>

<h3><a class='u'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>In computer science most problems can be described with a tree of possible combinations, in which a solution is being searched for. The key to efficient algorithms is not only to find an efficient way to search, but also to construct only the interesting parts of the tree.</p>

<p>With lazy lists you can recursively define this tree and search in it, and it automatically constructs only these parts of the tree that you&#39;re actually using.</p>

<p>In general laziness makes programming easier because you don&#39;t have to know if the result of a computation will be used at all - you just make it lazy, and if it&#39;s not used the computation isn&#39;t executed at all. If it&#39;s used, you lost nothing.</p>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://design.perl6.org/S02.html#Lists" class="podlinkurl"
>http://design.perl6.org/S02.html#Lists</a></p>

[% option no-header %] [% option no-footer %]

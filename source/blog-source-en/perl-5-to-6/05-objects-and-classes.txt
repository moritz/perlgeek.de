Objects and Classes
<!-- 1222208400 -->

<h3><a class='u'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 05 - Objects and Classes</p>

<h3><a class='u'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    class Shape {
        method area { ... }    # literal &#39;...&#39;
        has $.colour is rw;
    }

    class Rectangle is Shape {
        has $.width;
        has $.height;

        method area {
            $!width * $!height;
        }
    }

    my $x = Rectangle.new(
            width   =&#62; 30.0,
            height  =&#62; 20.0,
            colour  =&#62; &#39;black&#39;,
        );
    say $x.area;                # 600
    say $x.colour;              # black
    $x.colour = &#39;blue&#39;;</pre>

<h3><a class='u'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl 6 has an object model that is much more fleshed out than the Perl 5 one. It has keywords for creating classes, roles, attributes and methods, and has encapsulated private attributes and methods. In fact it&#39;s much closer to the <code>Moose</code> Perl 5 module (which was inspired by the Perl 6 object system).</p>

<p>There are two ways to declare classes</p>

<pre>    class ClassName;
    # class definition goes here</pre>

<p>The first one begins with <code>class ClassName;</code> and stretches to the end of the file. In the second one the class name is followed by a block, and all that is inside the block is considered to be the class definition.</p>

<pre>    class YourClass {
        # class definition goes here
    }
    # more classes or other code here</pre>

<h4><a class='u'
name="Methods"
>Methods</a></h4>

<p>Methods are declared with the <code>method</code> keyword. Inside the method you can use the term <code>self</code> to refer to the object on which the method is called (the <i>invocant</i>).</p>

<p>You can also give the invocant a different name by adding a first parameter to the signature list and appending a colon <code>:</code> to it.</p>

<p>Public methods can be called with the syntax <code>$object.method</code> if it takes no arguments, and <code>$object.method($arg, $foo)</code> or <code>$object.method: $arg, $foo</code> if it takes arguments.</p>

<pre>    class SomeClass {
        # these two methods do nothing but return the invocant
        method foo {
            return self;
        }
        method bar(SomeClass $s: ) {
            return $s;
        }
    }
    my SomeClass $x .= new;
    $x.foo.bar                      # same as $x</pre>

<p>(The <code>my SomeClass $x .= new</code> is actually a shorthand for <code>my SomeClass $x = SomeClass.new</code>. It works because the type declaration fills the variable with a &#34;type object&#34; of <code>SomeClass</code>, which is an object representing the class.)</p>

<p>Methods can also take additional arguments just like subs.</p>

<p>Private methods can be declared with <code>method !methodname</code>, and called with <code>self!method_name</code>.</p>

<pre>    class Foo {
        method !private($frob) {
            return &#34;Frobbed $frob&#34;;
        }

        method public {
            say self!private(&#34;foo&#34;);
        }
    }</pre>

<p>Private methods can&#39;t be called from outside the class and private methods are only looked up in the current class, not its parent classes.</p>

<h4><a class='u'
name="Attributes"
>Attributes</a></h4>

<p>Attributes are declared with the <code>has</code> keyword, and have a &#34;twigil&#34;, that is a special character after the sigil. For private attributes that&#39;s a bang <code>!</code>, for public attributes it&#39;s the dot <code>.</code>. Public attributes are just private attributes with a public accessor. So if you want to modify the attribute, you need to use the <code>!</code> sigil to access the actual attribute, and not the accessor (unless the accessor is marked <code>is rw</code>).</p>

<pre>    class SomeClass {
        has $!a;
        has $.b;
        has $.c is rw;

        method set_stuff {
            $!a = 1;    # ok, writing to attribute from within the class
            $!b = 2;    # same
            $.b = 3;    # ERROR, can&#39;t write to ro-accessor
            $.c = 4;    # ok, the accessor is rw
        }

        method do_stuff {
            # you can use the private name instead of the public one
            # $!b and $.b do the same thing by default
            return $!a + $!b + $!c;
        }
    }
    my $x = SomeClass.new;
    say $x.a;       # ERROR!  a is private
    say $x.b;       # ok
    $x.b = 2;       # ERROR!  b is not declared &#34;rw&#34;
    $x.c = 3;       # ok</pre>

<h4><a class='u'
name="Inheritance"
>Inheritance</a></h4>

<p>Inheritance is done through an <code>is</code> trait.</p>

<pre>    class Foo is Bar { 
        # class Foo inherits from class Bar
        ...
    }</pre>

<p>All the usual inheritance rules apply - public methods are first looked up on the direct type, and if that fails, on the parent class (recursively). Likewise the type of a child class is conforming to that of a parent class:</p>

<pre>        class Bar { }
        class Foo is Bar { }
        my Bar $x = Foo.new();   # ok, since Foo ~~ Bar</pre>

<p>In this example the type of <code>$x</code> is <code>Bar</code>, and it is allowed to assign an object of type <code>Foo</code> to it, because &#34;every <code>Foo</code> is a <code>Bar</code>&#34;.</p>

<p>Classes can inherit from multiple other classes:</p>

<pre>    class ArrayHash is Hash is Array { 
        ...
    }</pre>

<p>Though multiple inheritance also comes with multiple problems, and people usually advise against it. Roles are often a safer choice.</p>

<h4><a class='u'
name="Roles_and_Composition"
>Roles and Composition</a></h4>

<p>In general the world isn&#39;t hierarchical, and thus sometimes it&#39;s hard to press everything into an inheritance hierarchy. Which is one of the reasons why Perl 6 has Roles. Roles are quite similar to classes, except you can&#39;t create objects directly from them, and that composition of multiple roles with the same method names generate conflicts, instead of silently resolving to one of them, like multiple inheritance would do.</p>

<p>While classes are intended primarily for type conformance, roles are the primary means for code reuse in Perl 6.</p>

<pre>    role Paintable {
        has $.colour is rw;
        method paint { ... } # literal ...
    }
    class Shape {
        method area { ... }
    }

    class Rectangle is Shape does Paintable {
        has $.width;
        has $.height;
        method area {
            $!width * $!height;
        }
        method paint() {
            for 1..$.height {
                say &#39;x&#39; x $.width;
            }
        }
    }

    Rectangle.new(width =&#62; 8, height =&#62; 3).paint;</pre>

<h3><a class='u'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S12.html" class="podlinkurl"
>http://perlcabal.org/syn/S12.html</a> <a href="http://perlcabal.org/syn/S14.html" class="podlinkurl"
>http://perlcabal.org/syn/S14.html</a> <a href="http://www.jnthn.net/papers/2009-yapc-eu-roles-slides.pdf" class="podlinkurl"
>http://www.jnthn.net/papers/2009-yapc-eu-roles-slides.pdf</a> <a href="http://en.wikipedia.org/wiki/Perl_6#Roles" class="podlinkurl"
>http://en.wikipedia.org/wiki/Perl_6#Roles</a></p>

[% option no-header %] [% option no-footer %]

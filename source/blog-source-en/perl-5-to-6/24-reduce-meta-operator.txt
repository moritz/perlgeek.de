The Reduction Meta Operator


<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 24 - The Reduction Meta Operator</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    say [+] 1, 2, 3;    # 6
    say [+] ();         # 0
    say [~] &#60;a b&#62;;      # ab
    say [**] 2, 3, 4;   # 2417851639229258349412352

    [\+] 1, 2, 3, 4     # 1, 3, 6, 10
    [\**] 2, 3, 4       # 4, 81, 2417851639229258349412352

    if [&#60;=] @list {
        say &#34;ascending order&#34;;
    }</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="Description"
>Description</a></h3>

<p>The reduction meta operator <code>[...]</code> can enclose any associative infix operator, and turn it into a list operator. This happens as if the operator was just put between the items of the list, so <code>[op] $i1, $i2, @rest</code> returns the same result as if it was written as <code>$i1 op $i2 op @rest[0] op @rest[1] ...</code>.</p>

<p>This is a very powerful construct that promotes the plus <code>+</code> oeprator into a <code>sum</code> function, <code>~</code> into a <code>join</code> (with empty separator) and so on. It is somewhat similar to the <code>List.reduce</code> function, and if you had some exposure to functional programming, you&#39;ll probably know about <code>foldl</code> and <code>foldr</code> (in Lisp or Haskell). Unlike those <code>[...]</code> respects the associativity of the enclosed operator, so <code>[/] 1, 2, 3</code> is interpreted as <code>(1 / 2) / 3</code> (left associative), <code>[**] 1, 2, 3</code> is handled correctly as <code>1 ** (2**3)</code> (right associative).</p>

<p>Like all other operators whitespaces are forbidden, so you while you can write <code>[+]</code>, you can&#39;t say <code>[ + ]</code>.</p>

<p>Since comparison operators can be chained, you can also write things like</p>

<pre>    if    [==] @nums { say &#34;all nums in @nums are the same&#34; }
    elsif [&#60;=] @nums { say &#34;@nums is in ascending order&#34;}
    elsif [&#60;]  @nums { say &#34;@nums is in strict ascending order&#34; }</pre>

<p>You can even reduce the assignment operator:</p>

<pre>    my @a = 1..3;
    [=] @a, 4;          # same as @a[0] = @a[1] = @a[2] = 4;</pre>

<p>Note that <code>[...]</code> always returns a scalar, so <code>[,] @list</code> is actually the same as <code>[@list]</code>.</p>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="Getting_partial_results"
>Getting partial results</a></h4>

<p>There&#39;s a special form of this operator that uses a backslash like this: <code>[\+]</code>. It returns a list of the partial evaluation results. So <code>[\+] 1..3</code> returns the list <code>1, 1+2, 1+2+3</code>, which is of course <code>1, 3, 6</code>.</p>

<pre>    [\~] &#39;a&#39; .. &#39;d&#39;     # &#60;a ab abc abcd&#62;</pre>

<p>Since right-associative operators evaluate from right to left, you also get the partial results that way:</p>

<pre>    [\**] 1..3;         # 3, 2**3, 1**(2**3), which is 3, 8, 1</pre>

<p>Multiple reduction operators can be combined:</p>

<pre>    [~] [\**] 1..3;     # &#34;381&#34;</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="MOTIVATION"
>MOTIVATION</a></h3>

<p>Programmers are lazy, and don&#39;t want to write a loop just to apply a binary operator to all elements of a list. <code>List.reduce</code> does something similar, but it&#39;s not as terse as the meta operator (<code>[+] @list</code> would be <code>@list.reduce(&#38;infix:&#60;+&#62;)</code>), and takes care of the associativity of the operator.</p>

<p>If you&#39;re not convinced, play a bit with it (pugs mostly implements it), it&#39;s real fun.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S03.html#Reduction_operators" class="podlinkurl"
>http://perlcabal.org/syn/S03.html#Reduction_operators</a>, <a href="http://www.perlmonks.org/?node_id=716497" class="podlinkurl"
>http://www.perlmonks.org/?node_id=716497</a></p>

[% option no-header %] [% option no-footer %]

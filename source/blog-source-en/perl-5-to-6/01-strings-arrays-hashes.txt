Strings, Arrays, Hashes;
<!-- 1221949200 -->

<h3><a class='u' href='#___top' title='click to go to top of document'
name="NAME"
>NAME</a></h3>

<p>&#34;Perl 5 to 6&#34; Lesson 01 - Strings,
Arrays,
Hashes;</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SYNOPSIS"
>SYNOPSIS</a></h3>

<pre>    my $five = 5;
    print &#34;an interpolating string, just like in perl $five\n&#34;;
    say &#39;say() adds a newline to the output, just like in perl 5.10&#39;;

    my @array = 1, 2, 3, &#39;foo&#39;;
    my $sum = @array[0] + @array[1];
    if $sum &#62; @array[2] {
        say &#34;not executed&#34;;
    }
    my $number_of_elems = @array.elems;     # or +@array
    my $last_item = @array[*-1];

    my %hash = foo =&#62; 1, bar =&#62; 2, baz =&#62; 3;
    say %hash{&#39;bar&#39;};                       # 2
    say %hash&#60;bar&#62;;                         # same with auto-quoting
    # this is an error: %hash{bar}</pre>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="DESCRIPTION"
>DESCRIPTION</a></h3>

<p>Perl 6 is just like perl 5 - only better. Statements are terminated by semicolons. The after the last statement in a block and after a closing curly brace at the end of a line the semicolon is option.</p>

<p>Variables still begin with a sigil (like <code>$</code>, <code>@</code>, <code>%</code>), and many Perl 5 builtins are still mostly unchanged in Perl 6.</p>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="Strings"
>Strings</a></h4>

<p>Strings are quoted with double quotes (in which case they are interpolating), or with single quotes. Backslash escapes work just like in Perl 5.</p>

<p>However the interpolation rules have changed a bit. The following things interpolate</p>

<pre>    my $scalar = 6;
    my @array = 1, 2, 3;
    say &#34;Perl $scalar&#34;;         # &#39;Perl 6&#39;
    say &#34;An @array[]&#34;;          # &#39;An 1 2 3&#39;
    say &#34;@array[1]&#34;;            # &#39;2&#39;
    say &#34;Code: { $scalar * 2 }&#34; # &#39;Code: 12&#39;</pre>

<p>Arrays and hashes only interpolate if followed by an index, empty indexes interpolate the whole data structure.</p>

<p>A block in curly braces is executed as a code block, and the result is interpolated.</p>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="Arrays"
>Arrays</a></h4>

<p>Arrays variables still begin with the <code>@</code> sigil. And they always do, even if an index is present.</p>

<pre>    my @a = 5, 1, 2;            # no parens needed anymore
    say @a[0];                  # yes, it starts with @
    say @a[0, 2];               # slices also work</pre>

<p>Lists are constructed with the Comma operator. <code>1,</code> is a list, <code>(1)</code> isn&#39;t.</p>

<p>Since everything is an object, you can call methods on arrays:</p>

<pre>    my @b = @a.sort;
    @b.elems;                   # number of items
    if @b &#62; 2 { say &#34;yes&#34; }     # still works
    @b.end                      # number of last index. Replaces $#array
    my @c = @b.map({$_ * 2 });  # map is also a method, yes</pre>

<p>There is a short form for the old <code>qw(..)</code> quoting construct:</p>

<pre>    my @methods = &#60;shift unshift push pop end delete sort map&#62;;</pre>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="Hashes"
>Hashes</a></h4>

<p>While Perl 5 hashes are even sized lists, Perl 6 hashes are lists of pairs. Pairs are also used for other things, like named arguments to subs, but more on that later.</p>

<p>Just like with arrays the sigil stays invariant when you index it. And hashes also have methods that you can call on them.</p>

<pre>    my %drinks =
        France  =&#62; &#39;Wine&#39;,
        Bavaria =&#62; &#39;Beer&#39;,
        USA     =&#62; &#39;Coke&#39;;

    say &#34;The people in France love &#34;,  %drinks{&#39;France&#39;};
    %drinks.delete(&#39;France&#39;);</pre>

<p>Note that when you access hash elements with <code>%hash{...}</code>, the key is not auto quoted like in Perl 5. So <code>%hash{foo}</code> doesn&#39;t access index <code>&#34;foo&#34;</code>, but calls the function <code>foo()</code>. The auto quoting isn&#39;t gone, it just has a different syntax:</p>

<pre>    say %drinks&#60;Bavaria&#62;;</pre>

<h4><a class='u' href='#___top' title='click to go to top of document'
name="Final_Notes"
>Final Notes</a></h4>

<p>Most builtin methods exists both as a method and as a sub. So you can write both <code>sort @array</code> and <code>@array.sort</code>.</p>

<p>Finally you should know that both <code>[..]</code> and <code>{...}</code> are just method calls with a special syntax, not something tied to arrays and hashes. That means that they are also not tied to a particular sigil.</p>

<pre>    my $a = [1, 2, 3];
    say $a[2];          # 3</pre>

<p>This means that you don&#39;t need special dereferencing syntax, and that you can create objects that can act as arrays, hashes and subs at the same time.</p>

<h3><a class='u' href='#___top' title='click to go to top of document'
name="SEE_ALSO"
>SEE ALSO</a></h3>

<p><a href="http://perlcabal.org/syn/S02.html" class="podlinkurl"
>http://perlcabal.org/syn/S02.html</a>, <a href="http://perlcabal.org/syn/S29.html" class="podlinkurl"
>http://perlcabal.org/syn/S29.html</a></p>

[% option no-header %] [% option no-footer %]

Automating Deployments: Stage 2: Uploading
<!-- 2016-04-30 -->

<p>Once you have the <a href="https://perlgeek.de/blog-en/automating-deployments/2016-015-building-in-the-pipeline.html">pipeline for building a package</a>, it's time to
distribute the freshly built package to the machines where it's going to be
installed on.</p>

<p>I've previously explained the nuts and bolts of getting a Debian package into
<a href="http://perlgeek.de/blog-en/automating-deployments/2016-006-distributing-packages.html">a repository managed by
aptly</a>
so it's time to automate that.</p>

<h2>Some Assumptions</h2>

<p>We are going to need a separate repository for each
<a href="http://perlgeek.de/blog-en/automating-deployments/2016-008-environments.html">environment</a>
we want to deploy to (or maybe group of environments; it might be OK and even
desirable to share a repository between various testing environments that can
be used in parallel, for example for security, performance and functional
testing).</p>

<p>At some point in the future, when a new version of the operating system is
released, we'll also need to build packages for another major version, so for
example for Debian <code>stretch</code> instead of <code>jessie</code>. So it's best to plan for
that case. Based on these assumptions, the path to each repository will be
<code>$HOME/aptly/$environment/$distribution</code>.</p>

<p>For the sake of simplicity, I'm going to assume a single host on which both
testing and production repositories will be hosted on from separate
directories. If you need those repos on separate servers, it's easy to reverse
that decision (or make a different one in the first place).</p>

<p>To easy the transportation and management of the repository, a GoCD agent
should be running on the repo server. It can copy the packages from the GoCD
server's artifact repository with built-in commands.</p>

<h2>Scripting the Repository Management</h2>

<p>It would be possible to manually initialize each repository, and only automate
the process of adding a package. But since it's not hard to do, taking the
opposite route of creating automatically on the fly is more reliable. The next
time you need a new environment or need to support a new distribution you will
benefit from this decision.</p>

<p>So here is a small Perl program that, given an environment, distribution and a
package file name, creates the aptly repo if it doesn't exist yet, writes the
config file for the repo, and adds the package.</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use 5.014;
use JSON qw(encode_json);
use File::Path qw(mkpath);
use autodie;

unless ( @ARGV == 3) {
    die "Usage: $0 &lt;environment&gt; &lt;distribution&gt; &lt;.deb file&gt;\n";
}
my ( $env, $distribution, $package ) = @ARGV;

my $base_path   = "$ENV{HOME}/aptly";
my $repo_path   = "$base_path/$env/$distribution";
my $config_file = "$base_path/$env-$distribution.conf";
my @aptly_cmd   = ("aptly", "-config=$config_file");

init_config();
init_repo();
add_package();


sub init_config {
    mkpath $base_path;
    open my $CONF, '&gt;:encoding(UTF-8)', $config_file;
    say $CONF encode_json( {
    rootDir =&gt; $repo_path,
    architectures =&gt; [qw( i386 amd64 all )],
    });
    close $CONF;
}

sub init_repo {
    return if -d "$repo_path/db";
    mkpath $repo_path;
    system @aptly_cmd, "repo", "create", "-distribution=$distribution", "myrepo";
    system @aptly_cmd, "publish", "repo", "myrepo";
}

sub add_package {
    system @aptly_cmd,  "repo", "add", "myrepo", $package;
    system @aptly_cmd,  "publish", "update", $distribution;
}
</code></pre>

<p>As always, I've developed and tested this script interactively, and only
started to plug it into the automated pipeline once I was confident that it
did what I wanted.</p>

<p>And as all software, it's meant to be under version control, so <a href="https://github.com/moritz/deployment-utils/blob/master/add-package">it's now part
of the deployment-utils git
repo</a>.</p>

<h2>More Preparations: GPG Key</h2>

<p>Before GoCD can upload the debian packages into a repository, the go agent
needs to have a GPG key that's not protected by a password. You can either log
into the <code>go</code> system user account and create it there with <code>gpg --gen-key</code>, or
copy an existing <code>.gnupg</code> directory over to <code>~go</code> (don't forget to adjust the
ownership of the directory and the files in there).</p>

<h2>Integrating the Upload into the Pipeline</h2>

<p>The first stage of the pipeline builds the Debian package, and
records the resulting file as an artifact. The upload step needs to retrieve
this artifact with a <code>fetchartifact</code> task. This is the config for the second
stage, to be inserted directly after the first one:</p>

<pre><code>  &lt;stage name="upload-testing"&gt;
    &lt;jobs&gt;
      &lt;job name="upload-testing"&gt;
        &lt;tasks&gt;
          &lt;fetchartifact pipeline="" stage="build" job="build-deb" srcdir="package-info"&gt;
            &lt;runif status="passed" /&gt;
          &lt;/fetchartifact&gt;
          &lt;exec command="/bin/bash"&gt;
            &lt;arg&gt;-c&lt;/arg&gt;
            &lt;arg&gt;deployment-utils/add-package testing jessie package-info_*.deb&lt;/arg&gt;
          &lt;/exec&gt;
        &lt;/tasks&gt;
        &lt;resources&gt;
          &lt;resource&gt;aptly&lt;/resource&gt;
        &lt;/resources&gt;
      &lt;/job&gt;
    &lt;/jobs&gt;
  &lt;/stage&gt;
</code></pre>

<p>Note that <code>testing</code> here refers to the name of the environment (which you can
chose freely, as long as you are consistent), not the testing distribution of
the Debian project.</p>

<p>There is a <code>aptly</code> resource, which you must assign to the agent running on the
repo server. If you want separate servers for testing and production
repositories, you'd come up with a more specific resource name here (for
example `aptly-testing^) and a separate one for the production repository.</p>

<h2>Make the Repository Available through HTTP</h2>

<p>To make the repository reachable from other servers, it needs to be exposed to
the network. The most convenient way is over HTTP. Since only static files
need to be served (and a directory index), pretty much any web server will do.</p>

<p>An example config for <a href="http://www.lighttpd.net/">lighttpd</a>:</p>

<pre><code>dir-listing.encoding = "utf-8"
server.dir-listing   = "enable"
alias.url = ( 
    "/debian/testing/jessie/"    =&gt; "/var/go/aptly/testing/jessie/public/",
    "/debian/production/jessie/" =&gt; "/var/go/aptly/production/jessie/public/",
    # more repos here
)
</code></pre>

<p>And for the <a href="https://httpd.apache.org/">Apache HTTP server</a>, once you've
configured a virtual host:</p>

<pre><code>Options +Indexes
Alias /debian/testing/jessie/     /var/go/aptly/testing/jessie/public/
Alias /debian/production/jessie/  /var/go/aptly/production/jessie/public/
# more repos here
</code></pre>

<h2>Achievement Unlocked: Automatic Build and Distribution</h2>

<p>With theses steps done, there is automatic building and upload of
packages in place. Since client machines can pull from that repository at
will, we can tick off the distribution of packages to the client machines.</p>

[% include ad-mailing %]

[% option no-header %][% option no-footer %]
[% comment vim: set ft=html: %]

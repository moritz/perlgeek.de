Automating Deployments: Installing Packages
<!-- 2016-01-16 -->

<p>After the long build-up of <a
    href="//perlgeek.de/blog-en/automating-deployments/2016-005-example-project.html">building</a>
and <a
href="//perlgeek.de/blog-en/automating-deployments/2016-006-distributing-packages.html">distributing
and authenticating packages</a>, actually installing them is easy. On the
target system, run</p>

<code>
$ apt-get update
$ apt-get install package-info
</code>

<p>(replace <code>package-info</code> with the package you want to install, if
that deviates from the example used previously).</p>

<p>If the package is of high quality, it takes care of restarting services
where necessary, so no additional actions are necessary afterwards.</p>

<h3>Coordination with Ansible</h3>

<p>If several hosts are needed to provide a service, it can be beneficial to
coordinate the update, for example only updating one or two hosts at a time,
or doing a small integration test on each after moving on to the next.</p>

<p>A nice tool for doing that is <a
href="http://www.ansible.com/">Ansible</a>, an open source IT automation
system.</p>

<p>Ansibles starting point is an <em>inventory</em> file, which lists that
hosts that Ansible works with, optionally in groups, and how to access
them.</p>

<p>It is best practice to have one inventory file for each environment
(production, staging, development, load testing etc.) with the same group
names, so that you can deploy to a different environment simply by using
a different inventory file.</p>

<p>Here is an example for an inventory file with two web servers and a
database server:</p>

<pre>
# production
[web]
www01.yourorg.com
www02.yourorg.com

[database]
db01.yourorg.com

[all:vars]
ansible_ssh_user=root
</pre>

<p>Maybe the staging environment needs only a single web server:</p>

<pre>
# staging
[web]
www01.staging.yourorg.com

[database]
db01.stagingyourorg.com

[all:vars]
ansible_ssh_user=root
</pre>

<p>Ansible is organized in modules for separate tasks. Managing Debian
packages is done with the <a
href="http://docs.ansible.com/ansible/apt_module.html">apt</a> module:</p>

<pre>$ ansible -i staging web -m apt -a 'name=package-info update_cache=yes state=latest'</pre>

<p>The <code>-i</code> option specifies the path to the inventory file, here
<code>staging</code>. The next argument is the group of hosts (or a single
host, if desired), and <code>-m apt</code> tells Ansible to use the apt
module.</p>

<p>What comes after the <code>-a</code> is a module-specific command.
<code>name</code> specifies a Debian package, <code>update_cache=yes</code>
forces Ansible to run <code>apt-get update</code> before installing the latest
version, and <code>state=latest</code> says that that's what we want to
do.</p>

<p>If instead of the latest version we want a specific version,
<code>-a 'name=package-info=0.1 update_cache=yes state=present
force=yes'</code> is the way to go. Without <code>force=yes</code>, apt
wouldn't downgrade the module to actually get the desired version.</p>

<p>This uses the <em>ad-hoc</em> mode of Ansible. More sophisticated
deployments use <a
href="http://docs.ansible.com/ansible/playbooks.html">playbooks</a>, of which
I hope to write more later. Those also allow you to do configuration tasks
such as adding repository URLs and GPG keys for package authentication.</p>

[% include ad-mailing %]

[% option no-header %][% option no-footer %]
[% comment vim: set ft=html: %]

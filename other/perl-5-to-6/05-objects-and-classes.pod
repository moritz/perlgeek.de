=encoding UTF-8

=head1 NAME

"Perl 5 to 6" Lesson 05 - Objects and Classes

=head1 SYNOPSIS

    class Shape {
        method area { ... }    # literal '...'
        has $.colour is rw;
    }

    class Rectangle is Shape {
        has $.width;
        has $.height;

        method area {
            $!width * $!height;
        }
    }

    my $x = Rectangle.new(
            width   => 30.0,
            height  => 20.0,
            colour  => 'black',
        );
    say $x.area;                # 600
    say $x.colour;              # black
    $x.colour = 'blue';

=head1 DESCRIPTION

Perl 6 has an object model that is much more fleshed out than the Perl 5 one.
It has keywords for creating classes, roles, attributes and methods, and has
encapsulated private attributes and methods. In fact it's much closer to the
C<Moose> Perl 5 module (which was inspired by the Perl 6 object system).

There are two ways to declare classes

    class ClassName;
    # class definition goes here

The first one begins with C<class ClassName;> and stretches to the end of the
file. In the second one the class name is followed by a block, and all that is
inside the block is considered to be the class definition.

    class YourClass {
        # class definition goes here
    }
    # more classes or other code here

=head2 Methods

Methods are declared with the C<method> keyword. Inside the method you
can use the term C<self> to refer to the object on which the method is
called (the I<invocant>).

You can also give the invocant a different name by adding a first parameter to
the signature list and append a colon C<:> to it.

Public methods can be called with the syntax C<$object.method> if it takes no
arguments, and C<$object.method(@args)> or C<$object.method: @args> if it
takes arguments.

    class SomeClass {
        # these two methods do nothing but return the invocant
        method foo {
            return self;
        }
        method bar(SomeClass $s: ) {
            return $s;
        }
    }
    my SomeClass $x .= new;
    $x.foo.bar                      # same as $x

(The C<my SomeClass $x .= new> is actually a shorthand for
C<my SomeClass $x = SomeClass.new>. It works because the type declaration
fills the variable with a "typo object" of C<SomeClass>, which is an object
representing the class.)

Methods can also take additional arguments just like subs.

Private methods can be declared with C<method !methodname>, and called with
C<self!method_name>.

    class Foo {
        method !private($frob) {
            return "Frobbed $frob";
        }

        method public {
            say self!private("foo");
        }
    }

Private methods can't be called from outside the class.

=head2 Attributes

Attributes are declared with the C<has> keyword, and have a "twigil", that is
a special character after the sigil. For private attributes that's a bang C<!>,
for public attributes it's the dot C<.>. Public attributes are just private
attributes with a public accessor. So if you want to modify the attribute, you
need to use the C<!> sigil to access the actual attribute, and not the
accessor (unless the accessor is marked C<is rw>).

    class SomeClass {
        has $!a;
        has $.b;
        has $.c is rw;

        method set_stuff {
            $!a = 1;    # ok, writing to attribute from within the clas
            $!b = 2;    # same
            $.b = 3;    # ERROR, can't write to ro-accessor
            $.c = 4;    # ok, the accessor is rw
        }

        method do_stuff {
            # you can use the private name instead of the public one
            # $!b and $.b are really the same thing
            return $!a + $!b + $!c;
        }
    }
    my $x = SomeClass.new;
    say $x.a;       # ERROR!
    say $x.b;       # ok
    $x.b = 2;       # ERROR!
    $x.c = 3;       # ok

=head2 Inheritance

Inheritance is done through an C<is> trait.

    class Foo is Bar { 
        # class Foo inherits from class Bar
        ...
    }

All the usual inheritance rules apply - methods are first looked up on the
direct type, and if that fails, on the parent class (recursively). Likewise
the type of a child class is conforming to that of a parent class:

        class Bar { }
        class Foo is Bar { }
        my Bar $x = Foo.new();   # ok, since Foo ~~ Bar

In this example the type of C<$x> is C<Bar>, and it is allowed to assign an
object of type C<Foo> to it, because "every C<Foo> is a C<Bar>".

Classes can inherit from multiple other classes:

    class ArrayHash is Hash is Array { 
        ...
    }

Though multiple inheritance also comes with multiple problems, and people
usually advise against it. Roles are often a safer choice.

=head2 Roles and Composition

In general the world isn't hierarchical, and thus sometimes it's hard to press
everything into an inheritance hierarchy. Which is one of the reasons why Perl
6 has Roles. Roles are quite similar to classes, except you can't create
objects directly from them, and that composition of multiple roles with the
same method names generate conflicts, instead of silently resolving to one of
them, like multiple inheritance does.

While classes are intended primarily for type
conformance, roles are the primary means for code reuse in Perl 6.

    role Paintable {
        has $.colour is rw;
        method paint { ... }
    }
    class Shape {
        method area { ... }
    }

    class Rectangle is Shape does Paintable {
        has $.width;
        has $.height;
        method area {
            $!width * $!height;
        }
        method paint() {
            for 1..$.height {
                say 'x' x $.width;
            }
        }
    }

    Rectangle.new(width => 8, height => 3).paint;

=head1 SEE ALSO

L<http://perlcabal.org/syn/S12.html>
L<http://perlcabal.org/syn/S14.html>
L<http://www.jnthn.net/papers/2009-yapc-eu-roles-slides.pdf>
L<http://en.wikipedia.org/wiki/Perl_6#Roles>

=for time 1222208400
=for editor vim: spell

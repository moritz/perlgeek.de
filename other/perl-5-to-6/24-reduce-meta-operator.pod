=encoding UTF-8

=head1 NAME

"Perl 5 to 6" Lesson 24 - The Reduction Meta Operator

=head1 SYNOPSIS

    say [+] 1, 2, 3;    # 6
    say [+] ();         # 0
    say [~] <a b>;      # ab
    say [**] 2, 3, 4;   # 2417851639229258349412352

    [\+] 1, 2, 3, 4     # 1, 3, 6, 10
    [\**] 2, 3, 4       # 4, 81, 2417851639229258349412352

    if [<=] @list {
        say "ascending order";
    }

=head1 Description

The reduction meta operator C<[...]> can enclose any associative infix operator,
and turn it into a list operator. This happens as if the operator was just put
between the items of the list, so C<[op] $i1, $i2, @rest> returns the same
result as if it was written as C<$i1 op $i2 op @rest[0] op @rest[1] ...>.

This is a very powerful construct that promotes the plus C<+> operator into a
C<sum> function, C<~> into a C<join> (with empty separator) and so on. It is
somewhat similar to the C<List.reduce> function, and if you had some exposure
to functional programming, you'll probably know about C<foldl> and C<foldr>
(in Lisp or Haskell). Unlike those, C<[...]> respects the associativity of the
enclosed operator, so C<[/] 1, 2, 3> is interpreted as C<(1 / 2) / 3> (left
associative), C<[**] 1, 2, 3> is handled correctly as C<1 ** (2**3)> (right
associative).

Like all other operators, whitespace are forbidden, so you while you can write
C<[+]>, you can't say C<[ + ]>. (This also helps to disambiguate it from array
literals).

Since comparison operators can be chained, you can also write things like

    if    [==] @nums { say "all nums in @nums are the same" }
    elsif [<]  @nums { say "@nums is in strict ascending order" }
    elsif [<=] @nums { say "@nums is in ascending order"}

However you cannot reduce the assignment operator:

    my @a = 1..3;
    [=] @a, 4;          # Cannot reduce with = because list assignment operators are too fiddly

=head2 Getting partial results

There's a special form of this operator that uses a backslash like this:
C<[\+]>. It returns a list of the partial evaluation results. So 
C<[\+] 1..3> returns the list C<1, 1+2, 1+2+3>, which is of course C<1, 3, 6>.

    [\~] 'a' .. 'd'     # <a ab abc abcd>

Since right-associative operators evaluate from right to left, you also get
the partial results that way:

    [\**] 1..3;         # 3, 2**3, 1**(2**3), which is 3, 8, 1

Multiple reduction operators can be combined:

    [~] [\**] 1..3;     # "381"

=head1 MOTIVATION

Programmers are lazy, and don't want to write a loop just to apply a binary
operator to all elements of a list. C<List.reduce> does something similar, but
it's not as terse as the meta operator (C<[+] @list> would be
C<< @list.reduce(&infix:<+>) >>).
Also with reduce you have to takes care of the associativity of the operator
yourself, whereas the meta operator handles it for you.

If you're not convinced, play a bit with it (rakudo implements it), it's
real fun.

=head1 SEE ALSO

L<http://design.perl6.org/S03.html#Reduction_operators>,
L<http://www.perlmonks.org/?node_id=716497>

=for time 1228863600
=for editor vim: spell
